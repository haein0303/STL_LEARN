파일 정보 : SOURCE.cpp,  크기 - 2098
저장 시간 : 2022-03-02 13:18:24 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.2 수34              월23수34                   (1주1일)
// 
//	- 강의소개 ( 책 /  CPPReference.com /  )
//	- 코딩 스타일 ( C++ coding convention - reference(google C++ coding convention))
//	- 컴파일러 환경 세팅 ( Release mode /  X64 )
//						- 프로젝트 속성 -> 일반 -> C++ 버전 (최신 초안기능)
//	- SAVE 파일 작성
//		한학기 강의를 자동저장한다
// 
//	공부할 내용
//		- 파일 입출력 ( 텍스트 모드 / 바이너리 모드 )
//		-
// 
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>

using namespace std;

// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.

void save(string_view);

int main() 
{
//	cout << "string Size : " << sizeof(string) << endl;
//	cout << "string_view Size : " << sizeof(string_view) << endl;

	save("SOURCE.cpp");
}

void save(string_view fname) 
{

	//현재 시간을 화면에 출력한다
	auto time = floor<chrono::seconds>(chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = filesystem::file_size(fname);

	//파일을 연다
	ifstream in { fname.data() };

	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",ios::app };
	
	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "파일 정보 : " << fname << ",  크기 - " << size << endl;
	out << "저장 시간 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	out << endl;

	
	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();


	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	copy(v.begin(), v.end(), ostream_iterator<char>{out});
	
}
파일 정보 : main.cpp,  크기 - 518
저장 시간 : 2022-03-07 10:45:22 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "stdafx.h"
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;

	
	save("main.cpp");
}

파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-07 11:00:04 GMT+9


#pragma once


void save(std::string_view);

파일 정보 : save.cpp,  크기 - 1656
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


파일 정보 : main.cpp,  크기 - 530
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-14 10:29:12 GMT+9


#pragma once


void save(std::string_view);

=============================================================================
=============================================================================


파일 정보 : save.cpp,  크기 - 1866
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n=============================================================================" << std::endl;
	out << "=============================================================================\n\n" << std::endl;
	out << "파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1609
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	C++ 복습
// 
// 
// ============================================================================

#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include "playground.h"
#include "save.h"

template <class T>
void change_T(T& a, T& b) {
	T tmp{ a };
	a = b;
	b = tmp;
}


class Dog {
public:
	int local_num;
	std::string name;
	int age;
public:
	Dog(int n) : local_num{ n } {	}
	Dog(std::string str, int age) :name{ str }, age{age} { }
	friend std::ostream& operator<< (std::ostream&, const Dog&);
	
	operator int() {
		return local_num;
	}
};

std::ostream& operator<<(std::ostream& os , const Dog& dog) {
	os << dog.local_num;
	return os;
}


void change(auto& a, auto& b) {
	auto tmp{ b };
	b = a;
	a = tmp;
}


int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	Dog a{ 1 };
	Dog b{ 2 };
	std::string c = "STL";
	std::string d = "C++";
	Dog e{ "코코",3 };
	Dog f{ "댕댕",5 };

	change(a, b);
	change(c, d);
	change(e, f);

	std::cout << " a : " << a << " b : " << b << std::endl;
	std::cout << " c : " << c << " d : " << d << std::endl;
	std::cout << " e : name : " << e.name << " age : " << e.age << std::endl;
	std::cout << " f : name : " << f.name << " age : " << f.age << std::endl;

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2266
저장 시간 : 2022-03-16 12:14:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint() {

}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	saveNum();
	save("source0314.cpp");

}



=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2360
저장 시간 : 2022-03-16 12:16:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint(std::string_view fname) {
	std::ifstream in{ fname.data() };

	
	
}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	//saveNum();
	loadNum("int1000개.txt");
	save("source0314.cpp");

}



=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1538
저장 시간 : 2022-03-21 11:41:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

int main() {
	
	int num{1};
	int sum{};
	//int* n{};
	while (true) {
		/*cout << "만약 종료를 원하시면 0 을 입력해주세요 " << endl;
		cout << "몇개의 인트를 원하십니까? ";
		cin >> num;*/
		
		/*if (!num) {
			break;
		}*/

		//try {
		//	n = new int[num];
		//}
		//catch (exception& e) {
		//	cout << e.what(); // 시스템이 주는 에러는 체크가 가능
		//}

		//n = new int[num];

		/*for (int i = 0; i < num; i++) {
			n[i] = i + 1;
		}

		for (int i = 0; i < num; i++) {
			sum += n[i];
		}*/

		if (INT_MAX <= (sum + num)) {
			break;
		}
		else {
			sum += num;
			num++;
		}

		//delete[] n;
	}
	cout << "int max의 값을 넘지않는 1부터 N까지의 합은 : " << sum << " 입니다" << endl;
	cout << "n의 값은 : " << num << "입니다 " << endl;
	save("main.cpp");

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1126
저장 시간 : 2022-03-21 11:59:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	Dog *dogs = new Dog [3];

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		delete[] dogs;
		return 0;
	}
	delete[] dogs;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1128
저장 시간 : 2022-03-21 12:00:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	Dog *dogs = new Dog [3];

	//비상상황 f()에서 예외발생
	try {
		//f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		delete[] dogs;
		return 0;
	}
	delete[] dogs;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1124
저장 시간 : 2022-03-21 12:04:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog> dogs{ new Dog[3] };

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		return 0;
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1115
저장 시간 : 2022-03-21 12:04:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog> dogs{ new Dog[3] };

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1124
저장 시간 : 2022-03-21 12:06:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog[]> dogs{new Dog[3]};

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		return 0;
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 746
저장 시간 : 2022-03-21 12:18:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	찾아보기 - RAII / Stack Unwinding
// 
// 
// 
// ============================================================================


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;


int main() {
	save("main.cpp");
	
	while (true) {
		unique_ptr<int[]> p{ new int[10'000'000] };

		long long sum{};
		for (int i = 0; i < 10'000'000; i++) {
			sum += p[i];
		}
		cout << "합계 : " << sum << endl;
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 856
저장 시간 : 2022-03-23 11:46:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;

	while (input >> ch) {
		cout << ch << endl;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 848
저장 시간 : 2022-03-23 11:47:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;

	while (input >> ch) {
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 867
저장 시간 : 2022-03-23 11:47:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;
	input >> noskipws;
	while (input >> ch) {
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 918
저장 시간 : 2022-03-23 11:49:38 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;
	input >> noskipws;

	while (input >> ch) {
		if (islower(ch)) {
			ch = toupper(ch);
		}
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 933
저장 시간 : 2022-03-23 11:52:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };

	ofstream output { "소스.txt",ios::out };

	char ch;
	input >> noskipws;

	while (input >> ch) {
		ch = toupper(ch);
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 950
저장 시간 : 2022-03-23 11:53:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };

	ofstream output { "소스.txt" ,ios::out};

	char ch;
	input >> noskipws;

	while (input >> ch) {
		ch = toupper(ch);
		cout << ch;
		output << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 942
저장 시간 : 2022-03-23 12:02:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp"};
	ofstream output{ "소스 대문자.cpp" };
	transform(istreambuf_iterator<char>{input}, {}, ostreambuf_iterator<char>{output}, [](char c) {
		return toupper(c);
		});

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1056
저장 시간 : 2022-03-23 12:12:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

random_device rda;
default_random_engine drea{ rda() };
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;

	for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}
	sort(tmp.begin(), tmp.end());

	for (const auto& s : tmp) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1115
저장 시간 : 2022-03-23 12:13:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

random_device rda;
default_random_engine drea{ rda() };
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}


	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (const auto& s : tmp) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1143
저장 시간 : 2022-03-23 12:19:32 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format(":20",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1144
저장 시간 : 2022-03-23 12:19:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format(":20d",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1145
저장 시간 : 2022-03-23 12:19:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1138
저장 시간 : 2022-03-23 12:20:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1158
저장 시간 : 2022-03-23 12:22:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1157
저장 시간 : 2022-03-23 12:23:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1172
저장 시간 : 2022-03-23 12:25:13 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end(),greater<int>());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1199
저장 시간 : 2022-03-23 12:43:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end(), [](int a, int b) {
		return a > b;
		});


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1256
저장 시간 : 2022-03-23 12:52:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//sort(어디부터, 어디까지, 어떻게);
	// qsort 도 동일
	//정렬 구간
	sort(tmp.begin(), tmp.end(), [](int a, int b) {
		return a > b;
		});


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 998
저장 시간 : 2022-03-23 12:55:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int f(int a, int b) {
	return a + b;
}

int main() {
	save("main.cpp");

	auto x = f;
	//int res = (*f)(1, 2);
	int res = x(1, 2);
	cout << res << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 970
저장 시간 : 2022-03-23 12:57:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

void f() { cout << "함수호출" << endl; }

int main() {
	save("main.cpp");
	
	
	auto x = f;

	cout << typeid(x).name() << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 807
저장 시간 : 2022-03-23 12:59:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;



void f() { cout << "함수호출" << endl; }

int main() {
	save("main.cpp");
	
	
	auto x = f;

	cout << typeid(x).name() << endl;
	cout << addressof(x) << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 881
저장 시간 : 2022-03-23 13:07:34 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;



void jump() { cout << "jump" << endl; }
void slide() { cout << "slide" << endl; }

int main() {
	save("main.cpp");

	void (*x)(void) = jump;
	int i{};
	bool toggle = true;

	while (true) {
		x();
		this_thread::sleep_for(1s);
		if ((i++ % 3) == 0) {
			if (toggle) {
				x = slide;
				toggle = false;
			}
			else {
				x = jump;
				toggle = true;
			}
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 977
저장 시간 : 2022-03-28 10:49:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 985
저장 시간 : 2022-03-28 10:49:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		f();
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 989
저장 시간 : 2022-03-28 10:50:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 991
저장 시간 : 2022-03-28 10:51:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if ((cnt % 3) == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 961
저장 시간 : 2022-03-28 10:52:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	while (true) {
		
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if ((cnt % 3) == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 717
저장 시간 : 2022-03-28 10:55:37 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	cout << sizeof(f) << typeid(f).name() << endl;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 723
저장 시간 : 2022-03-28 10:55:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	cout << sizeof(f)<<" " << typeid(f).name() << endl;
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 754
저장 시간 : 2022-03-28 11:02:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	//auto f = jump;

	void (*f)(void) = jump;

	cout << sizeof(f)<<"\n" << typeid(f).name() << endl;
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 707
저장 시간 : 2022-03-28 11:06:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	};
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 705
저장 시간 : 2022-03-28 11:07:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	}();
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 749
저장 시간 : 2022-03-28 11:08:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	}();

	cout << typeid([]() {}).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 748
저장 시간 : 2022-03-28 11:13:18 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");
	auto n = []() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	};

	cout << typeid(n).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 585
저장 시간 : 2022-03-28 11:19:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경


int main() {
	save("main.cpp");
	class Dog{};
	cout << typeid(Dog).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 586
저장 시간 : 2022-03-28 11:19:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

class Dog {};
int main() {
	save("main.cpp");
	
	cout << typeid(Dog).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 588
저장 시간 : 2022-03-28 11:21:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

auto x = []() {};
int main() {
	save("main.cpp");
	
	cout << typeid(x).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 588
저장 시간 : 2022-03-28 11:21:10 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경


int main() {
	save("main.cpp");
	auto x = []() {};
	cout << typeid(x).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 580
저장 시간 : 2022-03-28 11:25:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) -> bool {return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:29:58 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:32 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 5,4,3,2,1 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,2,3,4,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:31:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << "\t";
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 683
저장 시간 : 2022-03-28 11:34:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;

class Dog {
public :
	bool operator()(int a, int b) {
		cout << "Dog의 맴버함수야 " << a << " - " << b << endl;
		return a > b;
	}
};

int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), Dog{});

	for (int n : a) {
		cout << n << "  ";
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 557
저장 시간 : 2022-03-28 11:51:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

void jump() {
	cout << "점프" << endl;
}
void slide() {
	cout << "슬라이드" << endl;
}


int main() {
	save("main.cpp");
	
	function<void()> f = jump;
	f();
	f = slide;
	f();
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 857
저장 시간 : 2022-03-28 12:04:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

class STRING {
	void operator()(char* a) {
		
	}
};

int main() {
	//STRING a{"2022. 3. 28. "};
	//STRING b{ "STL" };

	//cout << a << b << endl;
	cout << typeid("2022. 3. 28. ").name() << endl;

	save("main.cpp");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 856
저장 시간 : 2022-03-28 12:04:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

class STRING {
	void operator()(char const a) {
		
	}
};

int main() {
	STRING a{"2022. 3. 28. "};
	STRING b{ "STL" };

	cout << a << b << endl;
	cout << typeid("2022. 3. 28. ").name() << endl;

	save("main.cpp");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1759


=============================================================================
=============================================================================




=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 2031


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 2034
저장 시간 : 2022-03-30 12:12:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
//   - 객체 생성시 고유번호를 부여
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

bool 관찰{ true };

class STRING {
public:
	char* p; // 확보한 자원 
	size_t num; // 관리하는 바이트 수
	int id; //생성 시 부여한 ID
	static int gid; // 클래스 스테틱 ID
 
	STRING() : id{ ++gid }, num{}, p{} {
		if (관찰) {
			print("생성자 - defualt");
		}
	}

	STRING(const char* str) :id{ ++gid }, num { strlen(str) }, p{ new char[num] } {
		if (관찰) {
			print("생성자 - const char*");

		}
		memcpy(p, str, num);
	}
	~STRING() {
		if (관찰) {
			print("소멸자");
		}
		if (num) {
			delete[] p;
		}
	}

	STRING operator+ (const STRING& rhs) const {
		STRING tmp;
		tmp.num = num + rhs.num;
		tmp.p = new char[tmp.num];
		memcpy(tmp.p, p, num);
		memcpy(tmp.p + num, rhs.p, rhs.num);
		return tmp;
	}

	void print(const char* s) {
		cout << s << "[" << id << "] 객체주소 : " << this << " 자원 ";
		if (num != 0) {
			cout << " 갯수 : " << num << " 자원주소 : " << (void*)p << endl;
		}
		else {
			cout << " 없음 " << endl;
		}

	}
};

ostream& operator<<(ostream& os, const STRING& str) {
	for (int i{}; i < str.num; i++) {
		os << str.p[i];
	}
	return os;
}


int STRING::gid{};

int main() {
	save("main.cpp");
	STRING a{"2022. 3. 28. "};
	STRING b{ "STL" };
	STRING c = a + b;

	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	//cout << typeid("2022. 3. 28. ").name() << endl;

	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 2501
저장 시간 : 2022-03-30 12:20:09 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
//   - 객체 생성시 고유번호를 부여
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

bool 관찰{ true };

class STRING {
public:
	char* p; // 확보한 자원 
	size_t num; // 관리하는 바이트 수
	int id; //생성 시 부여한 ID
	static int gid; // 클래스 스테틱 ID
 
	STRING() : id{ ++gid }, num{}, p{} {
		if (관찰) {
			print("생성자 - defualt");
		}
	}

	STRING(const char* str) :id{ ++gid }, num { strlen(str) }, p{ new char[num] } {
		if (관찰) {
			print("생성자 - const char*");

		}
		memcpy(p, str, num);
	}
	//복사 생성자
	STRING(const STRING& other) : id{ ++gid }, num{ other.num }, p{ new char[num] } {
		memcpy(p, other.p, num);
		if (관찰) {
			print("복사생성자");
		}
	}

	//복사 생성 연산자
	STRING& operator= (const STRING& other) { 
		if (this == &other) {
			return *this;
		}
		else {
			num = other.num;
			delete[] p;
			p = new char[num];
			memcpy(p, other.p, num);
			if (관찰) {
				print("복사할당");
			}
			return *this;
		}
	}

	~STRING() {
		if (관찰) {
			print("소멸자");
		}
		if (num) {
			delete[] p;
		}
	}

	STRING operator+ (const STRING& rhs) const {
		STRING tmp;
		tmp.num = num + rhs.num;
		tmp.p = new char[tmp.num];
		memcpy(tmp.p, p, num);
		memcpy(tmp.p + num, rhs.p, rhs.num);
		return tmp;
	}

	void print(const char* s) {
		cout << s << "[" << id << "] 객체주소 : " << this << " 자원 ";
		if (num != 0) {
			cout << " 갯수 : " << num << " 자원주소 : " << (void*)p << endl;
		}
		else {
			cout << " 없음 " << endl;
		}

	}
};

ostream& operator<<(ostream& os, const STRING& str) {
	for (int i{}; i < str.num; i++) {
		os << str.p[i];
	}
	return os;
}


int STRING::gid{};

int main() {
	save("main.cpp");
	STRING a{"2022. 3. 28. "};
	STRING b{ "STL" };
	STRING c = a + b;

	cout << a << endl;
	cout << b << endl;
	cout << c << endl;
	//cout << typeid("2022. 3. 28. ").name() << endl;

	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1168
저장 시간 : 2022-04-04 10:27:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
//   - 객체 생성시 고유번호를 부여
// ============================================================================


#include <iostream>
#include <functional>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;

	array<STRING, 3> strs{ "2022년 1학기 STL", "월23 수34", "3월 30일 수요일 수34교시 4주 2일 강의" };

	for (int i = 0; i < strs.size(); ++i)
		cout << "strs[" << i << "] - " << strs[i] << endl;

	cout << endl << endl;
	cout << "strs의 STRING 3객체를 모두 더한 객체를 만들어 본다" << endl << endl;

	STRING all = strs[0] + strs[1] + strs[2];
	cout << "모두 더하면 - " << all << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1166
저장 시간 : 2022-04-04 10:31:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
//   - 객체 생성시 고유번호를 부여
// ============================================================================


#include <iostream>
#include <functional>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;

	array<STRING, 3> strs{ "2022년 1학기 STL", "월23 수34", "3월 30일 수요일 수34교시 4주 2일 강의" };

	for (int i = 0; i < strs.size(); ++i)
		cout << "strs[" << i << "] - " << strs[i] << endl;

	cout << endl << endl;
	cout << "strs의 STRING 3객체를 모두 더한 객체를 만들어 본다" << endl << endl;

	STRING all = strs[0] + strs[1] + strs[2];
	cout << "모두 더하면 - " << all << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 735
저장 시간 : 2022-04-04 10:48:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라

	array<STRING,3>::iterator p = a.begin();

	cout << *p << endl;
	++p;
	cout << *p << endl;
	p++;
	cout << *p << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 707
저장 시간 : 2022-04-04 10:52:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라

	for (array<STRING, 3>::iterator i = a.begin(); i != a.end(); ++i) {
		cout << *i << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 685
저장 시간 : 2022-04-04 10:52:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라

	for (auto i = a.begin(); i != a.end(); ++i) {
		cout << *i << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 714
저장 시간 : 2022-04-04 10:55:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라

	for (array<STRING, 3>::const_iterator i = a.cbegin(); i != a.end(); ++i) {
		cout << *i << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 686
저장 시간 : 2022-04-04 10:55:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라

	for (auto i = a.cbegin(); i != a.end(); ++i) {
		cout << *i << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 656
저장 시간 : 2022-04-04 10:56:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	//관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (STRING s: a) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 654
저장 시간 : 2022-04-04 10:57:18 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (STRING s: a) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 661
저장 시간 : 2022-04-04 10:59:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (const STRING& s: a) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 662
저장 시간 : 2022-04-04 11:00:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (const STRING& s: a) { 
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 672
저장 시간 : 2022-04-04 11:01:22 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 698
저장 시간 : 2022-04-04 11:10:15 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "켄테이너","반복자","알고리즘" };
	

	//[문제] a에 들어있는 원소(element)를 역방향으로
	//처음부터 끝까지 순회(iteration)하면서
	//값을 출력하라
	for (auto i = a.crbegin(); i != a.crend(); ++i) {
		cout << *i << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 756
저장 시간 : 2022-04-04 11:20:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라
	sort(a.begin(), a.end(), [](STRING a, STRING b) {
		return a.getNum() > b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 756
저장 시간 : 2022-04-04 11:20:10 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라
	sort(a.begin(), a.end(), [](STRING a, STRING b) {
		return a.getNum() > b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 756
저장 시간 : 2022-04-04 11:31:38 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라
	sort(a.begin(), a.end(), [](STRING a, STRING b) {
		return a.getNum() > b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 771
저장 시간 : 2022-04-04 11:33:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라

	sort(a.begin(), a.end(), [](const STRING& a,const STRING& b) {
		return a.getNum() > b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 771
저장 시간 : 2022-04-04 11:34:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라

	sort(a.begin(), a.end(), [](const STRING& a,const STRING& b) {
		return a.getNum() > b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 771
저장 시간 : 2022-04-04 11:35:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;



int main() {
	save("main.cpp");
	관찰 = true;
	array<STRING, 3> a{ "12345","12","123456789" };
	

	//[문제] array를 길이 오름차순으로 정렬하고 결과를 출력하라

	sort(a.begin(), a.end(), [](const STRING& a,const STRING& b) {
		return a.getNum() < b.getNum();
	});

	for (const auto& p : a) {
		cout << p << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 718
저장 시간 : 2022-04-04 11:47:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// 
// ============================================================================


#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	//관찰 = true;
	array<int, 5> a{ 1,2,3,4,5 };
	int num;
	while (true) {
		cout << "몇번째 : ";
		cin >> num;
		try {
			cout << "몇번째 값은 - " << a.at(num) << endl;
		}
		catch (exception& e) {
			cout << e.what() << endl;
		}
	}


}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 728
저장 시간 : 2022-04-04 11:53:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	//관찰 = true;
	
	vector <char> v;
	v.push_back('S');
	v.push_back('T');
	v.push_back('L');

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 718
저장 시간 : 2022-04-04 11:53:11 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	관찰 = true;
	
	vector <char> v;
	v.push_back('S');
	v.push_back('T');
	v.push_back('L');

	for (const auto& a : v) {
		cout << a;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 797
저장 시간 : 2022-04-04 11:58:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	//관찰 = true;
	vector <char> v;
	ifstream in{ "main.cpp" };
	char c;
	
	while (in >> c) {
		v.push_back(c);
	}

	//[문제] "소스.cpp"를 v에 저장

	for (const auto& a : v) {
		cout << a;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 815
저장 시간 : 2022-04-04 11:59:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	//관찰 = true;
	vector <char> v;
	ifstream in{ "main.cpp" };
	in >> noskipws;
	char c;
	
	while (in >> c) {
		v.push_back(c);
	}

	//[문제] "소스.cpp"를 v에 저장

	for (const auto& a : v) {
		cout << a;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 824
저장 시간 : 2022-04-04 12:00:14 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");
	//관찰 = true;
	vector <char> v;
	ifstream in{ "main.cpp" };
	in >> noskipws;
	char c;
	
	while (in >> c) {
		v.push_back(toupper(c));
	}

	//[문제] "소스.cpp"를 v에 저장

	for (const auto& a : v) {
		cout << a;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 890
저장 시간 : 2022-04-04 12:02:29 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] "소스.cpp"를 단어를 v에 저장

int main() {
	save("main.cpp");
	//관찰 = true;
	vector <string> v;
	ifstream in{ "main.cpp" };
	in >> noskipws;
	string str;
	
	while (in >> str) {
		v.push_back(str);
	}

	

	for (const auto& a : v) {
		cout << format("{:20}",a);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 874
저장 시간 : 2022-04-04 12:02:40 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] "소스.cpp"를 단어를 v에 저장

int main() {
	save("main.cpp");
	//관찰 = true;
	vector <string> v;
	ifstream in{ "main.cpp" };
	in >> noskipws;
	string str;
	
	while (in >> str) {
		v.push_back(str);
	}

	

	for (const auto& a : v) {
		cout << a;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 989
저장 시간 : 2022-04-04 12:07:52 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word.data() == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 982
저장 시간 : 2022-04-04 12:08:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 982
저장 시간 : 2022-04-04 12:08:21 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1038
저장 시간 : 2022-04-04 12:08:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1038
저장 시간 : 2022-04-04 12:09:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1038
저장 시간 : 2022-04-04 12:12:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1038
저장 시간 : 2022-04-04 12:12:40 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (true) {
		cout << "단어를 입력하세요 : ";
		cin >> word;
		if (word == "Q") {
			break;
		}
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 936
저장 시간 : 2022-04-04 12:18:29 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (cin >> word) {
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 936
저장 시간 : 2022-04-04 12:19:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (cin >> word) {
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 936
저장 시간 : 2022-04-04 12:19:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//관찰 = true;
	vector<string> v;

	string word;

	cout << "Q : 입력종료" << endl;
	while (cin >> word) {
		v.push_back(word);
	}

	sort(v.begin(), v.end());

	for (const auto& a : v) {
		cout << a << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 859
저장 시간 : 2022-04-06 12:14:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;

	cout << v.size() << sizeof(v) << endl;
	
	//vector<int>가 제공하는 자료형 - vector<int>::value_type;
	//v가 제공하는 함수 맴버 - v.push_back();
	//컨테이너간의 적용

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 866
저장 시간 : 2022-04-06 12:14:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;

	cout << v.size() << " " << sizeof(v) << endl;
	
	//vector<int>가 제공하는 자료형 - vector<int>::value_type;
	//v가 제공하는 함수 맴버 - v.push_back();
	//컨테이너간의 적용

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 985
저장 시간 : 2022-04-06 12:43:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;
	//[문제] vector의 메모미락 확장되는 모습을 관찰하고 싶다
	// - 원소를 하나씩 추가하면서 벡터가 관리하는 메모리의 크기를 관찰
	int tmp{ 0 };
	while (true) {

		cout << "Vector Size = " << v.size() << "  Vector scale = " << sizeof(v) << endl;
		v.push_back(tmp);
		++tmp;
		getchar();

	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 988
저장 시간 : 2022-04-06 12:44:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;
	//[문제] vector의 메모미락 확장되는 모습을 관찰하고 싶다
	// - 원소를 하나씩 추가하면서 벡터가 관리하는 메모리의 크기를 관찰
	int tmp{ 0 };
	while (true) {

		cout << "Vector Size = " << v.size() << "  Vector scale = " << v.capacity() << endl;
		v.push_back(tmp);
		++tmp;
		getchar();

	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 990
저장 시간 : 2022-04-06 12:44:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;
	//[문제] vector의 메모미락 확장되는 모습을 관찰하고 싶다
	// - 원소를 하나씩 추가하면서 벡터가 관리하는 메모리의 크기를 관찰
	int tmp{ 0 };
	while (true) {

		cout << "Vector Size = " << v.size() << "  Vector scale = " << v.capacity() << endl;
		v.push_back(tmp);
		++tmp;
		//getchar();

	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 948
저장 시간 : 2022-04-06 12:50:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	vector<int> v;
	//[문제] vector의 메모미락 확장되는 모습을 관찰하고 싶다
	// - 원소를 하나씩 추가하면서 벡터가 관리하는 메모리의 크기를 관찰

	while (true) {

		cout << "Vector Size = " << v.size() << "  Vector scale = " << v.capacity() << endl;
		v.push_back(0);

	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 846
저장 시간 : 2022-04-06 12:54:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp;
	tmp = getchar();

	cout << tmp << endl;

	while (true) {
		return 0;


	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 841
저장 시간 : 2022-04-06 12:54:52 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp;
	cin >> tmp;

	cout << tmp << endl;

	while (true) {
		return 0;


	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 841
저장 시간 : 2022-04-06 12:54:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp;
	cin >> tmp;

	cout << tmp << endl;

	while (true) {
		return 0;


	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 977
저장 시간 : 2022-04-06 12:59:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp{};
	long long sum{};
	while (cin >> tmp) {
		v.push_back(tmp);
	}
	for (int n : v) {
		sum += n;
	}

	cout << "합계 = " << sum << endl;

	cout << "평균 = " << sum / v.size() << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 977
저장 시간 : 2022-04-06 13:01:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp{};
	long long sum{};
	while (cin >> tmp) {
		v.push_back(tmp);
	}
	for (int n : v) {
		sum += n;
	}

	cout << "합계 = " << sum << endl;

	cout << "평균 = " << sum / v.size() << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 981
저장 시간 : 2022-04-06 13:02:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 키보드에서 int를 입력받아
	// 합계와 평균을 출력하라
	vector<int> v;
	int tmp{};
	long long sum{};

	while (cin >> tmp) {
		v.push_back(tmp);
	}

	for (int n : v) {
		sum += n;
	}

	cout << "합계 = " << sum << endl;

	cout << "평균 = " << sum / v.size() << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 728
저장 시간 : 2022-04-06 13:04:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다"};

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 741
저장 시간 : 2022-04-06 13:05:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다","넥스트레벨"};

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 741
저장 시간 : 2022-04-06 13:09:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다","넥스트레벨"};

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 758
저장 시간 : 2022-04-06 13:12:13 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다"};
	v.push_back("넥스트 레벨");

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 761
저장 시간 : 2022-04-06 13:19:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다"};
	v.emplace_back("넥스트 레벨");

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 761
저장 시간 : 2022-04-11 11:08:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다"};
	v.emplace_back("넥스트 레벨");

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 783
저장 시간 : 2022-04-11 11:10:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"진짜 벡터를 알아본다"};
	v.emplace_back("넥스트 레벨");

	v.push_back("123");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 757
저장 시간 : 2022-04-11 11:10:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v;
	v.emplace_back("넥스트 레벨");
	v.push_back("123");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 757
저장 시간 : 2022-04-11 11:23:21 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v;
	v.emplace_back("넥스트 레벨");
	v.push_back("123");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 757
저장 시간 : 2022-04-11 11:23:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v;
	v.emplace_back("넥스트 레벨");
	v.push_back("123");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 953
저장 시간 : 2022-04-11 11:29:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	vector<STRING> v{"1","333","55555","22","4444"};

	//길이 오름차순 소팅
	sort(v.begin(), v.end(), [](const STRING& a, const STRING& b) {
		return a.getNum() > b.getNum();
		});

	for (const STRING& s : v) {
		cout << s << endl;
	}


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 954
저장 시간 : 2022-04-11 11:30:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = false;
	vector<STRING> v{"1","333","55555","22","4444"};

	//길이 오름차순 소팅
	sort(v.begin(), v.end(), [](const STRING& a, const STRING& b) {
		return a.getNum() > b.getNum();
		});

	for (const STRING& s : v) {
		cout << s << endl;
	}


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 968
저장 시간 : 2022-04-11 11:30:26 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	
	vector<STRING> v{"1","333","55555","22","4444"};
	관찰 = true;
	//길이 오름차순 소팅
	sort(v.begin(), v.end(), [](const STRING& a, const STRING& b) {
		return a.getNum() > b.getNum();
		});
	관찰 = false;
	for (const STRING& s : v) {
		cout << s << endl;
	}


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 908
저장 시간 : 2022-04-11 11:58:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
//#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	vector<int> v{1,2,3,4,5,6,7,8,9,10};
	remove_if(v.begin(), v.end(), [](int n) {
		return n & 2 == 0;
		});
	//문제 짝수를 제거하고 출력하라.
	for (int n : v) {
		cout << n << ' ';
	}
	cout << endl;


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 942
저장 시간 : 2022-04-11 12:03:42 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
//#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	vector<int> v{1,2,3,4,5,6,7,8,9,10};
	auto p = remove_if(v.begin(), v.end(), [](int n) {
		return n & 2 == 0;
		});
	v.erase(p, v.end());

	//문제 짝수를 제거하고 출력하라.
	for (int n : v) {
		cout << n << ' ';
	}
	cout << endl;


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 949
저장 시간 : 2022-04-11 12:04:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
//#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	vector<int> v{1,2,3,4,5,6,7,8,9,10};

	auto p = remove_if(v.begin(), v.end(), [](int n) {
		return n & 2 == 0;
		}
	);

	v.erase(p, v.end());

	//문제 짝수를 제거하고 출력하라.
	for (int n : v) {
		cout << n << ' ';
	}
	cout << endl;


	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 986
저장 시간 : 2022-04-11 12:14:11 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1

	array<int, 26> count;

	ifstream in{ "main.cpp" };
	if (in) {
		cout << "file Read" << endl;

	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1076
저장 시간 : 2022-04-12 00:39:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1

	array<int, 26> count;

	ifstream in{ "main.cpp" };
	
	if (in) {
		cout << "file Read" << endl;

		vector<char> v{ istream_iterator<char> {in},{} };

		for (char c : v) {
			
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1175
저장 시간 : 2022-04-13 11:36:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1
	ifstream in{ "main.cpp" };
	array<int, 26> count{};
	char c;
	if (in) {
		cout << "file Read" << endl;
		while (in >> c) {
			if (isalpha(c)) {
				count[tolower(c) - 'a']++;
			}
		}
		for (int i{}; i < count.size(); ++i) {
			cout << i + 'a' << " - " << count[i] << endl;
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1184
저장 시간 : 2022-04-13 11:37:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1
	ifstream in{ "main.cpp" };
	array<int, 26> count{};
	char c;
	if (in) {
		cout << "file Read" << endl;
		while (in >> c) {
			if (isalpha(c)) {
				count[tolower(c) - 'a']++;
			}
		}
		for (int i{}; i < count.size(); ++i) {
			cout << (char) (i + 'a') << " - " << count[i] << endl;
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1194
저장 시간 : 2022-04-13 11:38:51 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1
	ifstream in{ "main.cpp" };
	array<int, 26> count{};
	char c;
	if (in) {
		cout << "file Read" << endl;
		while (in >> c) {
			if (isalpha(c)) {
				count[tolower(c) - 'a']++;
			}
		}
		for (int i{}; i < count.size(); ++i) {
			cout << static_cast<char>(i + 'a') << " - " << count[i] << endl;
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1201
저장 시간 : 2022-04-13 11:39:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	//[문제] "소스.cpp"를 읽어 알파벳의 갯수를 다음과 같이 출력하라
	// 대소문자는 구분하지않는다.
	// [a] = 10
	// [b] = 2
	// ...
	// [z] = 1
	ifstream in{ "main.cpp" };
	array<int, 26> count{};
	char c;
	if (in) {
		cout << "file Read" << endl;
		while (in >> c) {
			if (isalpha(c)) {
				count[tolower(c) - 'a']++;
			}
		}
		for (int i{}; i < count.size(); ++i) {
			cout << static_cast<char>(i + 'a') << " - " << count[i] << endl;
		}
	}
	//zzzzz
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 932
저장 시간 : 2022-04-13 11:48:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	

	//v = v.insert(3, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 937
저장 시간 : 2022-04-13 11:50:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	

	v.insert(v.begin(), 3, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 939
저장 시간 : 2022-04-13 11:50:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	

	v.insert(v.begin()+2, 1, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 940
저장 시간 : 2022-04-13 11:51:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	

	v.insert(v.cbegin()+2, 1, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 938
저장 시간 : 2022-04-13 11:55:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	

	v.insert(v.cbegin()+=2, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 951
저장 시간 : 2022-04-13 11:55:42 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	
	관찰 = true;
	v.insert(v.cbegin()+=2, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 954
저장 시간 : 2022-04-13 11:55:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <array>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");
	관찰 = true;
	//[문제] 세번째 원소 STRING("333"을 끼워넣고 전체를 출력하라
	vector<STRING> v{ "1","22","444","55555" };
	
	
	v.insert(v.cbegin()+=2, "333");
	
	for (const STRING &tmp : v) {
		cout << tmp << endl;
	}
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 809
저장 시간 : 2022-04-13 12:15:10 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	deque<STRING> d{ "1","22","333","4444","55555" };

	d.push_front("000");

	for (int i = 0; i < d.size(); ++i) {
		cout << d[i] << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 811
저장 시간 : 2022-04-13 12:15:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	deque<STRING> d{ "1","22","333","4444","55555" };

	//d.push_front("000");

	for (int i = 0; i < d.size(); ++i) {
		cout << d[i] << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 815
저장 시간 : 2022-04-13 12:16:34 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	deque<STRING> d{ "1","22","333","4444","55555" };

	cout << sizeof(d) << endl;

	for (int i = 0; i < d.size(); ++i) {
		cout << d[i] << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 878
저장 시간 : 2022-04-13 12:17:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.

int main() {
	save("main.cpp");

	deque<STRING> d{ "1","22","333","4444","55555" };

	cout << "Deque<STRING> SIZE : " << sizeof(d) <<"  STRING SIZE "<< sizeof(STRING) << endl;

	for (int i = 0; i < d.size(); ++i) {
		cout << d[i] << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1004
저장 시간 : 2022-04-13 13:13:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라

	ifstream in{ "main.cpp" };
	deque<STRING> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1056
저장 시간 : 2022-04-13 13:14:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라

	ifstream in{ "main.cpp" };
	deque<string> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	sort(d.begin(), d.end());

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1121
저장 시간 : 2022-04-13 13:16:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 길이 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라

	ifstream in{ "main.cpp" };
	deque<string> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	sort(d.begin(), d.end(), [](string a, string b){
		return a.size() > b.size();
	});

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1139
저장 시간 : 2022-04-13 13:18:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 길이 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라

	ifstream in{ "main.cpp" };
	deque<string> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	sort(d.begin(), d.end(), [](const string &a, const string &b){
		return a.length() > b.length();
	});

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1188
저장 시간 : 2022-04-16 23:23:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 길이 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라
	관찰 = true;
	ifstream in{ "main.cpp" };
	deque<string> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	sort(d.begin(), d.end(), [](const string &a, const string &b){
		return a.length() > b.length();
	});

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	STRING a{ "asdasd" };
	STRING b(a);



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1189
저장 시간 : 2022-04-16 23:23:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.4. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

//[문제] 키보드에서 입력하는 모든 단어를 받아라
//오름차순으로 정렬한다
//결과를 출력한다.



int main() {
	save("main.cpp");
	//[문제]
	// 소스.cpp 파일의 단어를 deque<STRING>에 저장하라.
	// 길이 오름차순으로 정렬하라
	// 정렬된 결과를 출력하라
	관찰 = true;
	ifstream in{ "main.cpp" };
	deque<string> d{};
	string s;
	while (in >> s) {
		d.push_front(s.data());
	}

	sort(d.begin(), d.end(), [](const string &a, const string &b){
		return a.length() > b.length();
	});

	for (const auto &a : d) {
		cout << a << endl;
	}
	
	STRING a{ "asdasd" };
	STRING b = a;



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 984
저장 시간 : 2022-04-18 10:57:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");

	관찰 = true;
	ifstream in{ "main.cpp" };
	string str;
	deque <string> d;


	while (in >> str) {
		d.push_back(str);
	}

	cout << "모두 : " << d.size() << "를 읽었다" << endl;

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a > b;
		});

	for (const string& s : d) {
		cout << s << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 812
저장 시간 : 2022-04-18 10:58:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
// 컨테이너 - 다른객체를 저장하는 객체
// sequence Container
//   - array    유일하게 크기가 컴파일 타임에 결정
//   - vector   dynamic array 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");

	관찰 = true;
	ifstream in{ "main.cpp" };
	string str;

	for (int i = 0; i < 10; ++i) {
		if (!(in >> str)) {
			break;
		};
		cout << str << endl;
	}



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 844
저장 시간 : 2022-04-18 11:01:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

extern bool 관찰;

int main() {
	save("main.cpp");

	관찰 = true;
	ifstream in{ "main.cpp" };
	string str;
	deque <string> d;


	while (in >> str) {
		d.push_back(str);
	}

	cout << "모두 : " << d.size() << "를 읽었다" << endl;

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a > b;
		});

	for (const string& s : d) {
		cout << s << endl;
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 733
저장 시간 : 2022-04-18 11:06:32 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

int main() {
	save("main.cpp");

	ifstream in{ "main.cpp" };
	
	deque<string> d{ istream_iterator<string>{in},{} };

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a < b;
		});

	copy(d.begin(), d.end(), ostream_iterator<string>{ cout, "\n"});
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 737
저장 시간 : 2022-04-18 11:06:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

int main() {
	save("main.cpp");

	ifstream in{ "main.cpp" };
	
	deque<string> d{ istream_iterator<string>{in},{} };

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a < b;
		});

	copy(d.begin(), d.end(), ostream_iterator<string>{ cout, "\n"});


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 737
저장 시간 : 2022-04-18 11:08:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d{ istream_iterator<string>{in},{} };

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a < b;
		});

	copy(d.begin(), d.end(), ostream_iterator<string>{ cout, "\n"});


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 737
저장 시간 : 2022-04-18 11:11:15 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d{ istream_iterator<string>{in},{} };

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a > b;
		});

	copy(d.begin(), d.end(), ostream_iterator<string>{ cout, "\n"});


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 891
저장 시간 : 2022-04-18 11:14:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d{ istream_iterator<string>{in},{} };

	sort(d.begin(), d.end(), [](const string& a, const string& b) {
		return a > b;
		});

	//각 단어를 오름차순(ascending order) 정렬

	for (int i = 0; i < d.size(); ++i) {
		sort(d[i].begin(), d[i].end());
	}


	copy(d.begin(), d.end(), ostream_iterator<string>{ cout, "\n"});


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 778
저장 시간 : 2022-04-18 11:28:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d;
	string str;
	

	while (in >> str) {
		d.push_back(str);
	}
	//[문제] library는 세 번째 단어이다. space는 몇 번째 단어인가?

	auto p = find(d.begin(), d.end(), "space"s);

	cout << p._Getcont() << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 882
저장 시간 : 2022-04-18 11:38:14 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d;
	string str;
	

	while (in >> str) {
		d.push_back(str);
	}
	//[문제] library는 세 번째 단어이다. space는 몇 번째 단어인가?

	auto p = find(d.begin(), d.end(), string{ "space" });

	if (p == d.end()) {
		cout << "없다네에" << endl;
	}
	else {
		cout << p - d.begin() + 1 << "번째 단어라네" << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 884
저장 시간 : 2022-04-18 11:38:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <deque>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	deque<string> d;
	string str;
	

	while (in >> str) {
		d.push_back(str);
	}
	//[문제] library는 세 번째 단어이다. space는 몇 번째 단어인가?

	auto p = find(d.begin(), d.end(), string{ "library" });

	if (p == d.end()) {
		cout << "없다네에" << endl;
	}
	else {
		cout << p - d.begin() + 1 << "번째 단어라네" << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 693
저장 시간 : 2022-04-18 11:44:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> d;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		d.push_back(str);
	}

	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 758
저장 시간 : 2022-04-18 11:47:21 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}

	for (const string& s : cont) {
		cout << s << endl;
	}
	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1049
저장 시간 : 2022-04-18 11:56:52 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}

	for (const string& s : cont) {
		
		cout << s << endl;
	}

	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	while (true) {
		if (beg == p) {
			break;
		}
		else {
			++step;
			++beg;
		}
		if (beg == cont.end()) {
			break;
		}
	}
	cout << step << "번째 단어라네" << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1078
저장 시간 : 2022-04-18 11:57:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}

	for (const string& s : cont) {
		
		cout << s << endl;
	}

	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	while (true) {
		if (beg == p) {
			break;
		}
		else {
			++step;
			++beg;
		}
		if (beg == cont.end()) {
			break;
		}
	}
	cout << distance(cont.begin(),p) + 1 << "번째 단어라네" << endl;

	

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1055
저장 시간 : 2022-04-18 12:02:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}

	for (const string& s : cont) {
		
		cout << s << endl;
	}

	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << distance(cont.begin(),p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라

	cont.sort([](const string& a, const string& b) {return a > b; });

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1053
저장 시간 : 2022-04-18 12:02:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << distance(cont.begin(),p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	for (const string& s : cont) {

		cout << s << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1155
저장 시간 : 2022-04-18 12:02:58 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1157
저장 시간 : 2022-04-18 12:09:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1298
저장 시간 : 2022-04-18 12:11:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.begin() };
	for (int i{}; i < 10; ++i) {
		cout << *asd++ << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1296
저장 시간 : 2022-04-18 12:11:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.end() };
	for (int i{}; i < 10; ++i) {
		cout << *asd-- << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1305
저장 시간 : 2022-04-18 12:13:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.end() };
	--asd;
	for (int i{}; i < 10; ++i) {
		cout << *asd-- << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1307
저장 시간 : 2022-04-18 12:14:09 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.rbegin()};
	--asd;
	for (int i{}; i < 10; ++i) {
		cout << *asd-- << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1307
저장 시간 : 2022-04-18 12:14:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.rbegin()};
	--asd;
	for (int i{}; i < 10; ++i) {
		cout << *asd++ << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1301
저장 시간 : 2022-04-18 12:14:29 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	auto asd{ cont.rbegin()};
	
	for (int i{}; i < 10; ++i) {
		cout << *asd++ << endl;
	}

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1327
저장 시간 : 2022-04-18 12:18:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	copy_if(cont.begin(), cont.end(), ostream_iterator<string>{cout}, [](const string& a) {
		return a.size() == 5; });

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1332
저장 시간 : 2022-04-18 12:18:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.18. 월23              월23수34                   
// 
//
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	save("main.cpp");

	ifstream in{ "연습.txt" };
	
	list<string> cont;
	string str;
	
	cout << "리스트의 크기 - " << sizeof(list<string>) << endl;

	while (in >> str) {
		cont.push_back(str);
	}


	auto p = find(cont.begin(), cont.end(), string{ "space" });
	int step{};
	auto beg = cont.begin();

	
	cout << "정렬전에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	//문제
	//cont를 ascending order로 정렬하라
	//정렬된 결과를 앞에서부터 10개만 화면 출력하라

	cont.sort([](const string& a, const string& b) {return a > b; });
	
	p = find(cont.begin(), cont.end(), string{ "space" });
	cout << "정렬후에는 " << distance(cont.begin(), p) + 1 << "번째 단어라네" << endl;
	
	copy_if(cont.begin(), cont.end(), ostream_iterator<string>{cout,"\n"}, [](const string& a) {
		return a.size() == 5; });

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 687
저장 시간 : 2022-04-25 12:06:29 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.25. 월23              월23수34                   
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	// 모니터 화면을 가리키는 포인터를 추상화한 반복자
	ostream_iterator<char> p{ cout }; // p는 모니터 좌상단 위치

	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';
	save("main.cpp");





}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 673
저장 시간 : 2022-04-25 12:10:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.25. 월23              월23수34                   
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	// 모니터 화면을 가리키는 포인터를 추상화한 반복자
	ostream_iterator<char> p{ cout }; // p는 모니터 좌상단 위치

	*p = 'A';
	*p = 'B';
	*p = 'C';
	save("main.cpp");





}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 714
저장 시간 : 2022-04-25 12:12:14 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.25. 월23              월23수34                   
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

int main() {
	// 모니터 화면을 가리키는 포인터를 추상화한 반복자
	ostream_iterator<char> p{ cout }; // p는 모니터 좌상단 위치

	*p = 'A'; //역방향반복자 코딩한 후 이해될 것임
	*p = 'B';
	*p = 'C';


	save("main.cpp");





}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 784
저장 시간 : 2022-04-25 12:18:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.25. 월23              월23수34                   
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	cout << typeid(iter).name() << endl;


}


int main() {

	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	show(istream_iterator<char>{cin});
	show(ostream_iterator<char>{cout});


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 983
저장 시간 : 2022-04-27 11:42:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	cout << typeid(iter).name() << endl;
	cout << typeid(iterator_traits<iter>::iterator_category).name() << endl;
	
}


int main() {
	int* p = NULL;
	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	//템플릿 함수에는 뭐가 전달될지 모른다. - 알았으면 더 좋은 함수를 만들 수 있다.
	show(p);
	show(istream_iterator<char>{cin});
	show(ostream_iterator<char>{cout});



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 985
저장 시간 : 2022-04-27 11:43:33 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <vector>
#include <fstream>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	//cout << typeid(iter).name() << endl;
	cout << typeid(iterator_traits<iter>::iterator_category).name() << endl;
	
}


int main() {
	int* p = NULL;
	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	//템플릿 함수에는 뭐가 전달될지 모른다. - 알았으면 더 좋은 함수를 만들 수 있다.
	show(p);
	show(istream_iterator<char>{cin});
	show(ostream_iterator<char>{cout});



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1125
저장 시간 : 2022-04-27 11:46:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <forward_list>
#include <deque>
#include <vector>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	//cout << typeid(iter).name() << endl;
	cout << typeid(iterator_traits<iter>::iterator_category).name() << endl;
	
}


int main() {
	int* p = NULL;
	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	//템플릿 함수에는 뭐가 전달될지 모른다. - 알았으면 더 좋은 함수를 만들 수 있다.

	show(istream_iterator<char>{cin});
	show(ostream_iterator<char>{cout});
	show(p);
	show(forward_list<char>::iterator());
	show(list<char>{}.begin());
	show(deque<char>::iterator());
	show(vector<char>::iterator());



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 956
저장 시간 : 2022-04-27 11:51:38 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <forward_list>
#include <deque>
#include <vector>
#include <string>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	//cout << typeid(iter).name() << endl;
	cout << typeid(iterator_traits<iter>::iterator_category).name() << endl;
	
}


int main() {
	int* p = NULL;
	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	//템플릿 함수에는 뭐가 전달될지 모른다. - 알았으면 더 좋은 함수를 만들 수 있다.
	array<int, 3> a;

	show(a.begin());


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 939
저장 시간 : 2022-04-27 11:54:58 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <list>
#include <forward_list>
#include <deque>
#include <vector>
#include <string>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

//[문제] "연습.txt"를

template <class iter>

void show(iter) {
	//[문제]iter의 category를 출력하라
	//cout << typeid(iter).name() << endl;
	cout << typeid(iter::iterator_category).name() << endl;
	
}


int main() {
	int* p = NULL;
	//반복자 종류를 출력해본다 show() : 반복자 종류를 출력한다.
	//템플릿 함수에는 뭐가 전달될지 모른다. - 알았으면 더 좋은 함수를 만들 수 있다.
	array<int, 3> a;

	show(a.begin());


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 460
저장 시간 : 2022-04-27 11:56:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "Hello!" };
	cout << str << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 603
저장 시간 : 2022-04-27 12:06:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "asdasdasdasdasdasdsafsdfsdfasdf" };
	cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	for (auto i = str.begin(); i != str.end(); ++i) {
		cout << i;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 629
저장 시간 : 2022-04-27 12:08:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "asdasdasdasdasdasdsafsdfsdfasdf" };
	cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	for (auto i = str.rbegin(); i != str.rend(); --i) {
		cout << i;
	}

	



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 665
저장 시간 : 2022-04-27 12:17:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "asdasdasdasdasdasdsafsdfsdfasdf" };
	//cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	cout << endl;
	for (auto i = str.rbegin(); i != str.rend(); --i) {
		cout << i;
	}

	



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 623
저장 시간 : 2022-04-27 13:01:42 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "work!" };
	//cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	cout << endl;
	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		//cout << i;
	}

	



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 644
저장 시간 : 2022-04-27 13:02:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "work!" };
	//cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	cout << endl;
	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 644
저장 시간 : 2022-04-27 13:02:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "work!" };
	//cout << str << endl;

	for (char c : str) {
		cout << c ;
	}
	cout << endl;
	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 658
저장 시간 : 2022-04-27 13:03:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "work!" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 664
저장 시간 : 2022-04-27 13:03:29 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "34512334123" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 696
저장 시간 : 2022-04-27 13:05:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 730
저장 시간 : 2022-04-27 13:06:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	STRING str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	unique(str.begin(), str.end());

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 749
저장 시간 : 2022-04-27 13:07:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	unique(str.begin(), str.end());

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 718
저장 시간 : 2022-04-27 13:08:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 720
저장 시간 : 2022-04-27 13:08:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.rbegin(), str.rend());
	

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 720
저장 시간 : 2022-04-27 13:08:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.rbegin(), str.rend());
	

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 718
저장 시간 : 2022-04-27 13:09:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i = str.rbegin(); i != str.rend(); ++i) {
		cout << *i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 686
저장 시간 : 2022-04-27 13:09:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 688
저장 시간 : 2022-04-27 13:10:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.rbegin(), str.rend());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 685
저장 시간 : 2022-04-27 13:18:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.4.27.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 666
저장 시간 : 2022-05-02 10:49:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 668
저장 시간 : 2022-05-02 10:50:22 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.rbegin(), str.rend());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 666
저장 시간 : 2022-05-02 10:50:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 666
저장 시간 : 2022-05-02 10:56:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 666
저장 시간 : 2022-05-02 10:57:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 666
저장 시간 : 2022-05-02 11:03:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 680
저장 시간 : 2022-05-02 11:04:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}
	cout << endl;
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 680
저장 시간 : 2022-05-02 11:04:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "The quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}
	cout << endl;
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 680
저장 시간 : 2022-05-02 11:06:10 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "the quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	

	for (auto i : str) {
		cout << i;
	}
	cout << endl;
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 693
저장 시간 : 2022-05-02 11:06:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "the quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	unique(str.begin(), str.end());

	cout << str << endl;
	cout << endl;
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 697
저장 시간 : 2022-05-02 11:08:01 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {
	string str{ "the quick brown fox jumps over the lazy dog" };
	//cout << str << endl;

	//[도전] str을 sort로 정렬할 수 있게 한다.

	sort(str.begin(), str.end());
	unique(str.begin(), str.end());

	cout << str << endl;
	cout << endl;


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 641
저장 시간 : 2022-05-02 11:12:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {

	vector<STRING> v{ "standard","template","library" };

	//[문제] v의 원소를 각각 오름차순으로 정렬
	
	
	for (auto a : v) {
		sort(a.begin(), a.end());
		cout << a << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 735
저장 시간 : 2022-05-02 11:14:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {

	vector<STRING> v{ "standard","template","library" };

	//[문제] v의 원소를 각각 오름차순으로 정렬
	
	for (int i = 0; i < v.size(); ++i) {
		sort(v[i].begin(), v[i].end(), [](char a, char b) {
			return a > b;
		});
	}
	
	for (auto a : v) {
		cout << a << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 735
저장 시간 : 2022-05-02 11:15:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "STRING.h"

using namespace std;




int main() {

	vector<STRING> v{ "standard","template","library" };

	//[문제] v의 원소를 각각 오름차순으로 정렬
	
	for (int i = 0; i < v.size(); ++i) {
		sort(v[i].begin(), v[i].end(), [](char a, char b) {
			return a > b;
		});
	}
	
	for (auto a : v) {
		cout << a << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1015
저장 시간 : 2022-05-04 12:55:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

bool operator< (const STRING& lhs, const STRING& rhs) {
	//사전식비교 알고리즘
	return lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
	//return string(lhs.begin(),lhs.end()) < string(rhs.begin(),rhs.end());
}




int main() {
	ifstream in{ "main.cpp" };
	
	STRING str;
	vector<char> v;
	v.reserve(100);
	//copy(키보드입력, 입력끝, 출력);
	my_copy(istream_iterator<char>{cin}, {}, v.begin());

	char* p = v.data();

	for (int i = 0; i < 100; ++i) {
		cout << p[i];
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1020
저장 시간 : 2022-05-04 12:56:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

bool operator< (const STRING& lhs, const STRING& rhs) {
	//사전식비교 알고리즘
	return lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
	//return string(lhs.begin(),lhs.end()) < string(rhs.begin(),rhs.end());
}




int main() {
	ifstream in{ "main.cpp" };
	
	STRING str;
	vector<char> v;
	v.reserve(100);
	//copy(키보드입력, 입력끝, 출력);
	my_copy(istream_iterator<char>{cin}, {}, v.begin());

	char* p = v.data();

	for (int i = 0; i < v.size(); ++i) {
		cout << p[i];
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1003
저장 시간 : 2022-05-04 12:58:52 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.2.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

bool operator< (const STRING& lhs, const STRING& rhs) {
	//사전식비교 알고리즘
	return lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
	//return string(lhs.begin(),lhs.end()) < string(rhs.begin(),rhs.end());
}




int main() {
	ifstream in{ "main.cpp" };
	
	STRING str;
	vector<char> v;
	v.reserve(100);
	//copy(키보드입력, 입력끝, 출력);
	my_copy(istream_iterator<char>{cin}, {}, back_inserter(v));

	for (int i = 0; i < v.size(); ++i) {
		cout << v[i];
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 734
저장 시간 : 2022-05-04 13:06:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(int a[10]) {
	for (int i = 0; i < 10; ++i) {
		cout << a[i] << endl;
	}
}



int main() {
	int a[10]{ 1,2,3,4,5 };
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 733
저장 시간 : 2022-05-04 13:07:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(int a[10]) {
	for (int i = 0; i < 10; ++i) {
		cout << a[i] << endl;
	}
}



int main() {
	int a[9]{ 1,2,3,4,5 };
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 733
저장 시간 : 2022-05-04 13:08:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(int a[10]) {
	for (int i = 0; i < 10; ++i) {
		cout << a[i] << endl;
	}
}



int main() {
	int a[5]{ 1,2,3,4,5 };
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 743
저장 시간 : 2022-05-04 13:11:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(vector<int> a) {
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
}



int main() {
	vector a{ 1,2,3,4,5 };
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 802
저장 시간 : 2022-05-04 13:15:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <span>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(span<int> a) {
	cout << "스팬 - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
	
}



int main() {
	vector a{ 1,2,3,4,5 };
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 799
저장 시간 : 2022-05-04 13:15:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <span>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(span<int> a) {
	cout << "스팬 - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
	
}



int main() {
	int a[]{1,2,3,4,5};
	//[문제]함수 print는 a를 인자로 받아서 값을 전부 출력한다.
	//p를 선언하고 정의하라

	print(a);

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 965
저장 시간 : 2022-05-09 10:52:51 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <span>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(span<int> a) {
	cout << "스팬 - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}
	
}

void print(span<char> a) {
	cout << "스팬(char) - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << endl;
	}

}

int main() {

	vector<int> a{ 1,2,3,4,5,6,7 };

	STRING s{ "aslkajsldkgoifml" };
	print(span<char>(&(*s.begin()), s.getNum()));

	
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 963
저장 시간 : 2022-05-09 10:53:11 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <span>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

void print(span<int> a) {
	cout << "스팬 - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << " ";
	}
	
}

void print(span<char> a) {
	cout << "스팬(char) - 전체 메모리 : " << a.size_bytes() << endl;
	for (int i = 0; i < a.size(); ++i) {
		cout << a[i] << " ";
	}

}

int main() {

	vector<int> a{ 1,2,3,4,5,6,7 };

	STRING s{ "aslkajsldkgoifml" };
	print(span<char>(&(*s.begin()), s.getNum()));

	
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 732
저장 시간 : 2022-05-09 11:15:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	vector<int> v;
	v.reserve(100);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>40}",v[i]);
	}
	cout << endl;
	//iota<int,int>(v.begin(), v.end(), 100);
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 731
저장 시간 : 2022-05-09 11:15:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	vector<int> v;
	v.reserve(100);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>4}",v[i]);
	}
	cout << endl;
	//iota<int,int>(v.begin(), v.end(), 100);
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 725
저장 시간 : 2022-05-09 11:15:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	vector<int> v;
	v.reserve(100);
	iota(v.begin(), v.end(), 1);
	for (int i = 0; i < 100; ++i) {

		cout << format("{:>4}",v[i]);

	}
	cout << endl;
	
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 818
저장 시간 : 2022-05-09 11:17:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

random_device rd1;
default_random_engine dre1{ rd1() };

int main() {

	vector<int> v;
	v.reserve(100);
	iota(v.begin(), v.end(), 1);
	shuffle(v.begin(), v.end(), dre1);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>4}",v[i]);
	}
	cout << endl;
	
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 808
저장 시간 : 2022-05-09 11:18:01 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

random_device rd1;
default_random_engine dre1{ rd1() };

int main() {

	vector<int> v(100);
	
	iota(v.begin(), v.end(), 1);
	shuffle(v.begin(), v.end(), dre1);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>4}",v[i]);
	}
	cout << endl;
	
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 895
저장 시간 : 2022-05-09 11:19:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

random_device rd1;
default_random_engine dre1{ rd1() };

int main() {

	vector<int> v(100);
	
	iota(v.begin(), v.end(), 1);
	shuffle(v.begin(), v.end(), dre1);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>4}",v[i]);
	}
	cout << endl;
	set<int> s{ v.begin(),v.end() };
	for (int n : s) {
		cout << format("{:>4}", n);
	}
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 908
저장 시간 : 2022-05-09 11:19:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <numeric>
#include <random>
#include <vector>
#include <algorithm>
#include <string>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

random_device rd1;
default_random_engine dre1{ rd1() };

int main() {

	vector<int> v(100);
	
	iota(v.begin(), v.end(), 1);
	shuffle(v.begin(), v.end(), dre1);
	for (int i = 0; i < 100; ++i) {
		cout << format("{:>4}",v[i]);
	}
	cout << endl;
	set<int,greater<int>> s{ v.begin(),v.end() };
	for (int n : s) {
		cout << format("{:>4}", n);
	}
	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 681
저장 시간 : 2022-05-09 11:34:51 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in	}, {} };

	set<string>(v.begin(), v.end());

	for (string a : v) {
		cout << a << " ";
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 684
저장 시간 : 2022-05-09 11:35:21 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in	}, {} };

	set<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << a << " ";
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 720
저장 시간 : 2022-05-09 11:37:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in}, {} };

	set<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << format("{:^80}", a) << " ";
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 713
저장 시간 : 2022-05-09 11:37:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in}, {} };

	set<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << format("{:^80}", a);
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 714
저장 시간 : 2022-05-09 11:38:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in}, {} };

	set<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << format("{:^100}", a);
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 714
저장 시간 : 2022-05-09 11:38:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in}, {} };

	set<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << format("{:^120}", a);
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 719
저장 시간 : 2022-05-09 11:39:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <string>
#include <vector>
#include <fstream>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {
	ifstream in{ "main.cpp"s };
	vector<string> v{ istream_iterator<string>{in}, {} };

	multiset<string> s( v.begin(), v.end());

	for (string a : s) {
		cout << format("{:^120}", a);
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 968
저장 시간 : 2022-05-09 12:14:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.4.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}
	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;

int main() {

	for (const Dog& dog : dogs) {
		dog.show();
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1223
저장 시간 : 2022-05-11 11:42:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}

	bool operator< (const Dog& rhs) const {
		return name < rhs.name;
	}

	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;

int main() {

	for (const Dog& dog : dogs) {
		//dog.show();
	}

	// class Dog를 set에 넣고 출력하자
	// Set<Dog>는 default Name 오름차순 정렬

	set<Dog> s{ dogs.begin(),dogs.end() };

	for (const Dog& dog : s) {
		dog.show();
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1350
저장 시간 : 2022-05-11 11:52:33 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}

	bool operator< (const Dog& rhs) const {
		return name < rhs.name;
	}

	int getNum() const {
		return num;
	}

	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;


auto 정렬기준 = [](const Dog& a, const Dog& b) {
	return a.getNum() < b.getNum();
};

int main() {

	
	//[문제]
	//set에 정렬할 수 있는 타입을 지정해서 num 오름차순으로 정렬

	set<Dog,decltype(정렬기준)> s;

	for (int i = 0; i < 1000; ++i) {
		s.emplace();
	}

	for (const Dog& dog : s) {
		dog.show();
	}

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1380
저장 시간 : 2022-05-11 11:53:26 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}

	bool operator< (const Dog& rhs) const {
		return name < rhs.name;
	}

	int getNum() const {
		return num;
	}

	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;


auto 정렬기준 = [](const Dog& a, const Dog& b) {
	return a.getNum() < b.getNum();
};

int main() {

	
	//[문제]
	//set에 정렬할 수 있는 타입을 지정해서 num 오름차순으로 정렬

	set<Dog,decltype(정렬기준)> s;

	for (int i = 0; i < 1000; ++i) {
		s.emplace();
	}

	for (const Dog& dog : s) {
		dog.show();
	}

	cout << s.size() << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1400
저장 시간 : 2022-05-11 11:53:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}

	bool operator< (const Dog& rhs) const {
		return name < rhs.name;
	}

	int getNum() const {
		return num;
	}

	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;


auto 정렬기준 = [](const Dog& a, const Dog& b) {
	return a.getNum() < b.getNum();
};

int main() {

	
	//[문제]
	//set에 정렬할 수 있는 타입을 지정해서 num 오름차순으로 정렬

	multiset<Dog,decltype(정렬기준)> s;

	for (int i = 0; i < 1000; ++i) {
		s.emplace();
	}

	for (const Dog& dog : s) {
		dog.show();
	}

	cout << "원소수 : " << s.size() << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1456
저장 시간 : 2022-05-11 12:01:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

default_random_engine re1;
uniform_int_distribution<int> uidAlpha{ 'a','z' };
uniform_int_distribution<int> uidNum{ 1,10000 };

class Dog {
	string name;//10글자 소문자
	int num;    //1~10000사이
public:
	Dog() {
		for (int i = 0; i < 10; ++i) {
			name += uidAlpha(re1);
			num = uidNum(re1);
		}
	}

	bool operator< (const Dog& rhs) const {
		return name < rhs.name;
	}

	int getNum() const { //cv-qualifier (한정자) / 
		return num;
	}

	void show()const {
		cout << name << " - " << num << endl;
	}
};

array<Dog,1000> dogs;

class 정렬기준 {
public:
	bool operator() ( const Dog& a, const Dog& b) const {
		return a.getNum() < b.getNum();
	};
};


int main() {

	
	//[문제]
	//set에 정렬할 수 있는 타입을 지정해서 num 오름차순으로 정렬

	multiset<Dog,정렬기준> s;

	for (int i = 0; i < 1000; ++i) {
		s.emplace();
	}

	for (const Dog& dog : s) {
		dog.show();
	}

	cout << "원소수 : " << s.size() << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 715
저장 시간 : 2022-05-11 12:09:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//[문제] 키보드에서 입력한 단어를 길이순으로 정렬

int main() {

	multiset<string> s;
	string tmp;
	while (cin>>tmp) {
		s.emplace(tmp);
	}

	for (const auto& a: s) {
		cout << a << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 852
저장 시간 : 2022-05-11 12:15:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <set>
#include <random>
#include <array>
#include <vector>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//[문제] 키보드에서 입력한 단어를 길이순으로 정렬

class 길이순 {
public:
	bool operator()(const string& a, const string& b) const {
		return a.length() < b.length();
	}
};

int main() {

	multiset<string,길이순> s;
	string tmp;
	while (cin>>tmp) {
		s.emplace(tmp);
	}

	for (const auto& a: s) {
		cout << a << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 772
저장 시간 : 2022-05-11 12:41:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//[문제] 만화제목과 주인공
int main() {

	map<string, string> comics{
		{"원펀맨", "사이타마"},
		{"원피스", "루피"},
		{"나루토", "나루토"},
		{"빌리배트","박쥐"},
		{"베르세르크","매의 단"},
	};

	//만화 제목과 주인공을 출력하라

	for (auto a : comics) {
		cout << a.first << a.second << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 788
저장 시간 : 2022-05-11 12:41:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//[문제] 만화제목과 주인공
int main() {

	map<string, string> comics{
		{"원펀맨", "사이타마"},
		{"원피스", "루피"},
		{"나루토", "나루토"},
		{"빌리배트","박쥐"},
		{"베르세르크","매의 단"},
	};

	//만화 제목과 주인공을 출력하라

	for (const auto& a : comics) {
		cout << a.first << " - " << a.second << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 805
저장 시간 : 2022-05-11 12:42:17 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//[문제] 만화제목과 주인공
int main() {

	map<string, string> comics{
		{"원펀맨", "사이타마"},
		{"원피스", "루피"},
		{"나루토", "나루토"},
		{"빌리배트","박쥐"},
		{"베르세르크","매의 단"},
		{"가", "가"},
	};

	//만화 제목과 주인공을 출력하라

	for (const auto& a : comics) {
		cout << a.first << " - " << a.second << endl;
	}



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 838
저장 시간 : 2022-05-11 13:16:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] "main.cpp"의 소문자 갯수를 세서 출력하라.

	//int alpha[26];
	//
	//char c = 'a';
	//alpha['a' - 'a']++;

	map<char, int> cim;

	ifstream in{ "main.cpp" };
	char tmp;
	while (in>>tmp) {
		cim[tolower(tmp)]++;
	}

	for (const auto& a : cim) {
		cout << "[" << a.first << "] = " << a.second << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 862
저장 시간 : 2022-05-11 13:17:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] "main.cpp"의 소문자 갯수를 세서 출력하라.

	//int alpha[26];
	//
	//char c = 'a';
	//alpha['a' - 'a']++;

	map<char, int> cim;

	ifstream in{ "main.cpp" };
	char tmp;
	while (in>>tmp) {
		if (tolower(tmp)) {
			cim[tmp]++;
		}
		
	}

	for (const auto& a : cim) {
		cout << "[" << a.first << "] = " << a.second << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 862
저장 시간 : 2022-05-11 13:17:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] "main.cpp"의 소문자 갯수를 세서 출력하라.

	//int alpha[26];
	//
	//char c = 'a';
	//alpha['a' - 'a']++;

	map<char, int> cim;

	ifstream in{ "main.cpp" };
	char tmp;
	while (in>>tmp) {
		if (islower(tmp)) {
			cim[tmp]++;
		}
		
	}

	for (const auto& a : cim) {
		cout << "[" << a.first << "] = " << a.second << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 833
저장 시간 : 2022-05-11 13:19:01 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.11.        수34              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] "main.cpp"의 소문자 갯수를 세서 출력하라.

	//int alpha[26];
	//
	//char c = 'a';
	//alpha['a' - 'a']++;

	map<string, int> cim;

	ifstream in{ "main.cpp" };
	string tmp;
	while (in>>tmp) {
		cim[tmp]++;
	}

	for (const auto& a : cim) {
		cout << "[" << a.first << "] = " << a.second << endl;
	}


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 725
저장 시간 : 2022-05-16 11:09:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };

	vector<string> v{ istream_iterator<string>{in},{} };

	cout << v.size() << endl;



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 728
저장 시간 : 2022-05-16 11:10:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };


	cout << v.size() << endl;



	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 850
저장 시간 : 2022-05-16 11:13:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };


	cout << v.size() << endl;

	vector<string> novel;
	string word;
	while (in >> word) {
		novel.push_back(word);
	}
	cout << novel.size() << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 889
저장 시간 : 2022-05-16 11:13:59 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	ifstream in2{ "Frankenstein.txt" };
	vector<string> v{ istream_iterator<string>{in},{} };


	cout << v.size() << endl;

	vector<string> novel;
	string word;
	
	while (in2 >> word) {
		novel.push_back(word);
	}
	cout << novel.size() << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 989
저장 시간 : 2022-05-16 11:19:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (tolower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << a.second << endl;
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1016
저장 시간 : 2022-05-16 11:20:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (tolower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << format("{:7}", a.second);
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1024
저장 시간 : 2022-05-16 11:20:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (tolower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << format("{:5}", a.second) << "  ";
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1025
저장 시간 : 2022-05-16 11:21:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (tolower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << format("{:10}", a.second) << "  ";
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1027
저장 시간 : 2022-05-16 11:24:40 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (tolower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << format("{:10}", a.second) << endl;
	}

	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1027
저장 시간 : 2022-05-16 11:33:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (islower(a[i])) {
				count[a[i]]++;
			}
		}
	}

	for (const auto& a : count) {
		cout << "[" << a.first << "] = " << format("{:10}", a.second) << endl;
	}

	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1262
저장 시간 : 2022-05-16 11:43:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (islower(a[i])) {
				count[a[i]]++;
			}
		}
	}
	vector<pair<char, int>> sorting;
	for (const auto& a : count) {
		sorting.push_back(a);
	}

	sort(sorting.begin(), sorting.end(), [](const pair<char, int>& a, const pair<char, int>& b) {
		return a.second > b.second;
		});
	
	for (const auto& a : sorting) {
		cout << "[" << a.first << "] = " << format("{:10}", a.second) << endl;
	}

	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1235
저장 시간 : 2022-05-16 11:50:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (islower(a[i])) {
				count[a[i]]++;
			}
		}
	}
	vector<pair<char, int>> sorting{ count.begin(),count.end() };

	sort(sorting.begin(), sorting.end(), [](const pair<char, int>& a, const pair<char, int>& b) {
		return a.second > b.second;
		});
	
	for (auto[문자, 개수] : sorting) { //바인딩
		cout << "[" << 문자 << "] = " << format("{:10}", 개수) << endl;
	}

	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1089
저장 시간 : 2022-05-16 11:53:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (islower(a[i])) {
				count[a[i]]++;
			}
		}
	}
	map<int, char> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << 문자 << "] = " << 개수 << endl;
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1102
저장 시간 : 2022-05-16 11:54:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 소문자별로 갯수를 출력하라
	map<char, int> count;
	for (const auto& a : v) {
		for (int i = 0; i < a.length(); ++i) {
			if (islower(a[i])) {
				count[a[i]]++;
			}
		}
	}
	map<int, char,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << 문자 << "] = " << 개수 << endl;
	}
	

	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1022
저장 시간 : 2022-05-16 11:56:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (const string& a : v) {
		count[a]++;
	}
	map<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << 문자 << "] = " << 개수 << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1049
저장 시간 : 2022-05-16 11:56:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (const string& a : v) {
		count[a]++;
	}
	map<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format(":8",문자) << "] = " << format(":5", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1049
저장 시간 : 2022-05-16 11:56:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (const string& a : v) {
		count[a]++;
	}
	map<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format(":8",문자) << "] = " << format(":5", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1053
저장 시간 : 2022-05-16 11:56:55 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (const string& a : v) {
		count[a]++;
	}
	map<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format("{:8}",문자) << "] = " << format("{:5}", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1055
저장 시간 : 2022-05-16 11:58:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (const string& a : v) {
		count[a]++;
	}
	map<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format("{:^15}",문자) << "] = " << format("{:5}", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1057
저장 시간 : 2022-05-16 12:13:09 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (string a : v) {
		count[a]++;
	}


	multimap<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format("{:^15}",문자) << "] = " << format("{:5}", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1057
저장 시간 : 2022-05-16 12:13:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.16.        월23              월23수34               8주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

//[문제] e-class에서 "frankenstein.txt"를 vector<string>에 읽어라
	ifstream in{ "Frankenstein.txt" };
	
	vector<string> v{ istream_iterator<string>{in},{} };

	//[문제] 많이 출현한 단어 순으로 출력
	map<string, int> count;
	for (string a : v) {
		count[a]++;
	}


	multimap<int, string,greater<int>> m;
	for (auto [문자, 개수] : count) {
		m.insert({ 개수,문자 });
	}

	for (auto [개수, 문자] : m) {
		cout << "[" << format("{:^20}",문자) << "] = " << format("{:5}", 개수) << endl;
	}
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 564
저장 시간 : 2022-05-18 11:34:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;


	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 599
저장 시간 : 2022-05-18 11:35:42 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	us.insert(5);
	us.insert(9);
	

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 662
저장 시간 : 2022-05-18 11:35:56 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	us.insert(51);
	us.insert(9);

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 662
저장 시간 : 2022-05-18 11:36:14 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	us.insert(-1);
	us.insert(9);

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 679
저장 시간 : 2022-05-18 11:36:35 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

int main() {

	unordered_set<int> us{ 1,2,3,4 };

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	us.insert(-1);
	us.insert(9);
	us.insert(-2);

	for (int n : us) {
		cout << n << "  ";
	}
	cout << endl;

	save("main.cpp");
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1225
저장 시간 : 2022-05-18 12:18:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  
// 
// ============================================================================


#include <iostream>
#include <unordered_set>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

//탬플릿을 특수화
template <>
class hash<STRING> {
public:
	size_t operator()(const STRING& s) const {
		size_t val = hash<string>()(string(s.begin(), s.end()));
		cout << "해셔의 출력 - " << val << "버킷 크기로 나눈 값 = " << (val) % 8 << endl;
		return val;
	}
};

int main() {
	save("main.cpp");
	//unordered_set<STRING> us{ "Standerd","Template","Library"};

	//while (true) {
	//	//현재 메모리를 그림으로 출력
	//	//추가할 데이터를 입력받는다
	//	for (int i{}; i < us.bucket_count(); ++i) {
	//		cout << "[ " << i << " ] ";
	//		for (auto p = us.begin(i); p != us.end(i);++p) {
	//			cout << " - " << *p;
	//		}
	//		cout << endl;
	//	}
	//	cout << endl;
	//	cout << "추가할 STRING를 입려하라 :";
	//	STRING num;
	//	cin >> num;
	//	us.insert(num);		
	//
	//}

	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1436
저장 시간 : 2022-05-18 12:39:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 10000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};

int main() {
	save("main.cpp");
	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	{
		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		cout << "vector find count = " << cnt << endl;
	}


	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1435
저장 시간 : 2022-05-18 12:40:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};

int main() {
	save("main.cpp");
	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	{
		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		cout << "vector find count = " << cnt << endl;
	}


	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1682
저장 시간 : 2022-05-18 12:44:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};

int main() {
	save("main.cpp");
	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}


	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 2995
저장 시간 : 2022-05-18 12:48:56 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		//시간측정
		auto start = chrono::steady_clock::now();


		set<int> s = { numbers.begin(),numbers.end() };

		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = s.find(n);
			if (p != s.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}


	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 3001
저장 시간 : 2022-05-18 12:49:38 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		


		set<int> s = { numbers.begin(),numbers.end() };

		//시간측정
		auto start = chrono::steady_clock::now();

		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = s.find(n);
			if (p != s.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}


	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 3644
저장 시간 : 2022-05-18 12:51:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 4939
저장 시간 : 2022-05-18 12:54:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	

	thread(vectorWork);
	thread(setWork);
	thread(unorederd_setWork);

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 4987
저장 시간 : 2022-05-18 12:56:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	

	thread t1(vectorWork);
	thread t2(setWork);
	thread t3(unordered_setWork);

	t1.join();
	t2.join();
	t3.join();
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 5654
저장 시간 : 2022-05-18 12:59:15 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		//시간측정
		auto start = chrono::steady_clock::now();


		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	
	//정렬된 벡터의 찾기 실력
	{
		//시간측정
		auto start = chrono::steady_clock::now();

		vector<int> v = { numbers.begin(),numbers.end() };
		sort(v.begin(), v.end());

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		int cnt{};
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	thread t1(vectorWork);
	thread t2(setWork);
	thread t3(unordered_setWork);

	t1.join();
	t2.join();
	t3.join();
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 5661
저장 시간 : 2022-05-18 13:00:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	//시간측정
	auto start = chrono::steady_clock::now();


	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;

	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	
	//정렬된 벡터의 찾기 실력
	{
	

		vector<int> v = { numbers.begin(),numbers.end() };
		sort(v.begin(), v.end());

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	/*thread t1(vectorWork);
	thread t2(setWork);
	thread t3(unordered_setWork);

	t1.join();
	t2.join();
	t3.join();*/
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 6423
저장 시간 : 2022-05-18 13:03:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	
	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;
	//시간측정
	auto start = chrono::steady_clock::now();
	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

void sortingVectorWork() {
	vector<int> v = { numbers.begin(),numbers.end() };
	sort(v.begin(), v.end());

	cout << "sorting vector Size = " << v.size() << endl;

	cout << "sorting vector Find val size = " << toFind.size() << endl;

	cout << "sorting vector Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	for (int n : toFind) {
		if (binary_search(v.begin(), v.end(), n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "sorting vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "sorting vector time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	
	//정렬된 벡터의 찾기 실력
	{
		vector<int> v = { numbers.begin(),numbers.end() };
		sort(v.begin(), v.end());

		cout << "sorting vector Size = " << v.size() << endl;

		cout << "sorting vector Find val size = " << toFind.size() << endl;

		cout << "sorting vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "sorting vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "sorting vector time = " << et << endl;
	}

	thread t1(vectorWork);
	thread t2(setWork);
	thread t3(unordered_setWork);
	thread t4(sortingVectorWork);

	t1.join();
	t2.join();
	t3.join();
	t4.join();

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 6423
저장 시간 : 2022-05-18 13:06:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 
//  비교할 컨테이너 vector / set / unordered_set
//  컨테이너의 원소 - 10000000개의 int
//  찾아볼 원소 = 10000000개의 int가 천만개를 갖고있는 컨테이너에 있는지
//  비교 - 걸리는 시간 비교
// ============================================================================


#include <iostream>
#include <unordered_set>
#include <array>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <chrono>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

#define TOTAL 10000000

array<int, TOTAL> numbers;
array<int, 1000> toFind;

default_random_engine dre;
uniform_int_distribution uid{1, 100000000};



void vectorWork() {
	
	vector<int> v = { numbers.begin(),numbers.end() };
	shuffle(v.begin(), v.end(), dre);

	cout << "vector Size = " << v.size() << endl;

	cout << "vector Find val size = " << toFind.size() << endl;

	cout << "vector Now Finding..." << endl;
	//시간측정
	auto start = chrono::steady_clock::now();
	int cnt{};
	for (int n : toFind) {
		auto p = find(v.begin(), v.end(), n);
		if (p != v.end()) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "vector time = " << et << endl;
}

void setWork() {

	set<int> s = { numbers.begin(),numbers.end() };

	cout << "set Size = " << s.size() << endl;

	cout << "set Find val size = " << toFind.size() << endl;

	cout << "set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "set time = " << et << endl;
}

void unordered_setWork() {
	//순서없는 셋
	unordered_set<int> s = { numbers.begin(),numbers.end() };

	cout << "unordered_set Size = " << s.size() << endl;

	cout << "unordered_set Find val size = " << toFind.size() << endl;

	cout << "unordered_set Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	//C++ 20
	for (int n : toFind) {
		if (s.contains(n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "unordered_set find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "unordered_set time = " << et << endl;
}

void sortingVectorWork() {
	vector<int> v = { numbers.begin(),numbers.end() };
	sort(v.begin(), v.end());

	cout << "sorting vector Size = " << v.size() << endl;

	cout << "sorting vector Find val size = " << toFind.size() << endl;

	cout << "sorting vector Now Finding..." << endl;

	//시간측정
	auto start = chrono::steady_clock::now();

	int cnt{};
	for (int n : toFind) {
		if (binary_search(v.begin(), v.end(), n)) {
			cnt++;
		}
	}
	auto stop = chrono::steady_clock::now();
	cout << "sorting vector find count = " << cnt << endl;

	auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
	cout << "sorting vector time = " << et << endl;
}

int main() {
	save("main.cpp");

	for (int& n : numbers) {
		n = uid(dre);
	}
	for (int& n : toFind) {
		n = uid(dre);
	}

	
	{
		vector<int> v = { numbers.begin(),numbers.end() };
		shuffle(v.begin(), v.end(),dre);

		cout << "vector Size = " << v.size() << endl;

		cout << "vector Find val size = " << toFind.size() << endl;

		cout << "vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			auto p = find(v.begin(), v.end(), n);
			if (p != v.end()) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "vector time = " << et << endl;
	}

	{
		
		set<int> s = { numbers.begin(),numbers.end() };
		
		cout << "set Size = " << s.size() << endl;

		cout << "set Find val size = " << toFind.size() << endl;

		cout << "set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "set time = " << et << endl;
	}

	{
		//순서없는 셋
		unordered_set<int> s = { numbers.begin(),numbers.end() };

		cout << "unordered_set Size = " << s.size() << endl;

		cout << "unordered_set Find val size = " << toFind.size() << endl;

		cout << "unordered_set Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		//C++ 20
		for (int n : toFind) {
			if (s.contains(n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "unordered_set find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "unordered_set time = " << et << endl;
	}
	
	//정렬된 벡터의 찾기 실력
	{
		vector<int> v = { numbers.begin(),numbers.end() };
		sort(v.begin(), v.end());

		cout << "sorting vector Size = " << v.size() << endl;

		cout << "sorting vector Find val size = " << toFind.size() << endl;

		cout << "sorting vector Now Finding..." << endl;

		//시간측정
		auto start = chrono::steady_clock::now();

		int cnt{};
		for (int n : toFind) {
			if (binary_search(v.begin(), v.end(), n)) {
				cnt++;
			}
		}
		auto stop = chrono::steady_clock::now();
		cout << "sorting vector find count = " << cnt << endl;

		auto et = chrono::duration_cast<chrono::microseconds> (stop - start);
		cout << "sorting vector time = " << et << endl;
	}

	thread t1(vectorWork);
	thread t2(setWork);
	thread t3(unordered_setWork);
	thread t4(sortingVectorWork);

	t1.join();
	t2.join();
	t3.join();
	t4.join();

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 747
저장 시간 : 2022-05-23 11:09:56 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {

	save("main.cpp");

	vector<string> v{ "STL","Algorithm","Library" };
	//v의 원소들이 전부 5글자 이상?
	if (all_of(v.begin(), v.end(), [](string a) {return isupper(a[0]); })) {
		cout << "전부 대문자" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 747
저장 시간 : 2022-05-23 11:10:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {

	save("main.cpp");

	vector<string> v{ "sTL","Algorithm","Library" };
	//v의 원소들이 전부 5글자 이상?
	if (all_of(v.begin(), v.end(), [](string a) {return isupper(a[0]); })) {
		cout << "전부 대문자" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 779
저장 시간 : 2022-05-23 11:12:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {

	save("main.cpp");

	vector<string> v{ "sTL","Algorithm","Library" };
	//v의 원소들이 전부 5글자 이상?
	auto 첫글자 = [](string a) {return isupper(*a.begin()); };

	if (all_of(v.begin(), v.end(), 첫글자)) {
		cout << "전부 대문자" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 739
저장 시간 : 2022-05-23 11:14:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {

	save("main.cpp");

	vector<int> v{ 2,4,6,8,10 };
	//v의 원소들이 전부 5글자 이상?
	auto 짝수 = [](int a) {return a%2 == 0; };

	if (all_of(v.begin(), v.end(), 짝수)) {
		cout << "전부 짝수" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 742
저장 시간 : 2022-05-23 11:14:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;


int main() {

	save("main.cpp");

	vector<int> v{ 2,4,6,8,10,11 };
	//v의 원소들이 전부 5글자 이상?
	auto 짝수 = [](int a) {return a%2 == 0; };

	if (all_of(v.begin(), v.end(), 짝수)) {
		cout << "전부 짝수" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 920
저장 시간 : 2022-05-23 11:34:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");

	vector<int> v{ 2,4,6,8,10,11 };
	//v의 원소들이 전부 5글자 이상?
	auto 짝수 = [](int a) {return a%2 == 0; };

	if (allof(v.begin(), v.end(), 짝수)) {
		cout << "전부 짝수" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 917
저장 시간 : 2022-05-23 11:34:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");

	vector<int> v{ 2,4,6,8,10 };
	//v의 원소들이 전부 5글자 이상?
	auto 짝수 = [](int a) {return a%2 == 0; };

	if (allof(v.begin(), v.end(), 짝수)) {
		cout << "전부 짝수" << endl;
	}
	else {
		cout << "전부는 아님" << endl;
	}


}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 836
저장 시간 : 2022-05-23 11:41:09 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "adfasdfj sadfkl jasdnflk nasfl kjsanf lasj n" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	while (true) {
		
		cout << s << "\r";

	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 931
저장 시간 : 2022-05-23 11:42:15 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "adfasdfj sadfkl jasdnflk nasfl kjsanf lasj n" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << s << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 984
저장 시간 : 2022-05-23 11:43:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "adfasdfj sadfkl jasdnflk nasfl kjsanf lasj n" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << s << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1020
저장 시간 : 2022-05-23 11:44:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "adfasdfj sadfkl jasdnflk nasfl kjsanf lasj n" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:120}",s) << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1021
저장 시간 : 2022-05-23 11:44:26 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "adfasdfj sadfkl jasdnflk nasfl kjsanf lasj n" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1008
저장 시간 : 2022-05-23 11:45:52 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "동해물과 백두산이 마르고 닳도록" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1014
저장 시간 : 2022-05-23 11:46:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "동해물과   백두산이   마르고   닳도록" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1018
저장 시간 : 2022-05-23 11:46:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "  동해물과   백두산이   마르고   닳도록  " };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()+1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1018
저장 시간 : 2022-05-23 11:46:40 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "  동해물과   백두산이   마르고   닳도록  " };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()+2, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1018
저장 시간 : 2022-05-23 11:46:58 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "  동해물과   백두산이   마르고   닳도록  " };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.begin()-1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1016
저장 시간 : 2022-05-23 11:47:11 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "  동해물과   백두산이   마르고   닳도록  " };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.end()-1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1025
저장 시간 : 2022-05-23 11:48:01 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;

template<class Iter, class UP>
bool allof(Iter 시작, Iter 끝, UP 판단) {
	while (시작 != 끝) {
		if (!판단( * 시작)) {
			return false;
		}
		++시작;
	}
	return true;
}

int main() {

	save("main.cpp");
	string s{ "afasdfladf adflk jasflkjasdlkfjsa fasdfkljasdflkad" };
	//[문제] 전광판으로 만들어라, 흘러가게 만들어라
	for (int i = 0; i < 10; ++i) {
		cout << endl;
	}
	while (true) {
		
		cout << format("{:^120}",s) << "\r";
		rotate(s.begin(),s.end()-1, s.end());
		this_thread::sleep_for(100ms);
	}
}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 721
저장 시간 : 2022-05-23 11:51:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	vector<int> v{ 1,2,3,4,5,6,7,8,9,10,3,3 };

	//count는 원하는 값의 개수를 센다
	//[문제] v에 3이 몇 개 있나?

	cout << "3의 개수 : " << count(v.begin(), v.end(), 3) << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 905
저장 시간 : 2022-05-23 11:54:34 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	vector<int> v{ 1,2,3,4,5,6,7,8,9,10,3,3 };

	//count는 원하는 값의 개수를 센다
	//[문제] v에 3이 몇 개 있나?

	cout << "3의 개수 : " << count(v.begin(), v.end(), 3) << endl;
	
	//count_if는 condition에 맞는 원소의 수를 센다
	//[문제] v의 홀수는 몇개 있나?

	cout << "홀수의 개수 : " << count_if(v.begin(), v.end(), [](int n) { return n % 2; }) << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 823
저장 시간 : 2022-05-23 11:59:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//mismatch  -  두 범위에서 달라지는 부분을 찾는다.

	string s1{ "1234567890" };
	string s2{ "123456779012345" };
	auto [s1position,s2position] = mismatch(s1.begin(), s1.end(), s2.begin());
	cout << *s1position << " " << *s2position << endl;
	wcout << "console Test" << endl;

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 862
저장 시간 : 2022-05-23 12:05:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//search - 어떤 구간에서 원하는 구간을 찾는다
	string s1 = { "abcd thethexx thetye" };
	string s2 = { "the" };
	auto p = search(s1.begin(), s1.end(), s2.begin(), s2.end());

	string result{ p,s1.end() };;;;;;
	cout << result << endl;


	for (int i = 0; i < 10; ++i) {
		wcout << "console Test" << endl;
	}
	

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 862
저장 시간 : 2022-05-23 12:06:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//search - 어떤 구간에서 원하는 구간을 찾는다
	string s1 = { "abcd thethexx thetye" };
	string s2 = { "the" };
	auto p = search(s1.begin(), s1.end(), s2.begin(), s2.end());

	string result{ p,s1.end() };;;;;;
	cout << result << endl;


	for (int i = 0; i < 10; ++i) {
		wcout << "console Test" << endl;
	}
	

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 707
저장 시간 : 2022-05-23 12:09:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//copy는 왜 mutating 알고리즘에 있나?

	vector<int> v{ 1,2,3 };
	copy(v.begin(), v.end(), back_inserter(v) );

	for (int n : v) {
		cout << n << endl;
	}



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 707
저장 시간 : 2022-05-23 12:09:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//copy는 왜 mutating 알고리즘에 있나?

	vector<int> v{ 1,2,3 };
	copy(v.begin(), v.end(), back_inserter(v) );

	for (int n : v) {
		cout << n << endl;
	}



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 713
저장 시간 : 2022-05-23 12:10:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");

	//copy는 왜 mutating 알고리즘에 있나?

	vector<int> v{ 1,2,3 };
	copy(v.begin(), v.end(),inserter(v,v.begin()+1) );

	for (int n : v) {
		cout << n << endl;
	}



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 756
저장 시간 : 2022-05-23 12:13:45 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");
	// erase-remove idiom
	vector<int> v{ 1,2,3,4,5,6 };
	
	//v에서 홀수를 삭제하시오
	v.erase(remove_if(v.begin(), v.end(), [](int n) {return n % 2; }), v.end());

	for (int n : v) {
		cout << n << endl;
	}



}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 985
저장 시간 : 2022-05-23 12:18:40 GMT+9


// ============================================================================
//									STL
// 
//	2022.5.18.        수34              월23수34               11주 2일     
// 

// 
// 
// ============================================================================


#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <thread>
#include <format>
#include "save.h"
#include "STRING.h"
#include "my_Algorithm.h"

using namespace std;



int main() {

	save("main.cpp");
	// erase-remove idiom
	vector<int> v{ 1,2,3,4,5,6 };
	
	//v에서 홀수를 삭제하시오
	// v.erase(remove_if(v.begin(), v.end(), [](int n) {return n % 2; }), v.end());
	// remove_if 는 조건에 맞는 데이터를 지우는 연산이 아닌 뒤로 밀어줌
	//			리턴값은 쓸모없어진 값의 시작 반복자
	// erase를 통해서 지움

	//C++20에서는 전역 erase함수를 제공한다
	erase_if(v, [](int n) {return n % 2; });

	for (int n : v) {
		cout << n << endl;
	}



}
