파일 정보 : SOURCE.cpp,  크기 - 2098
저장 시간 : 2022-03-02 13:18:24 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.2 수34              월23수34                   (1주1일)
// 
//	- 강의소개 ( 책 /  CPPReference.com /  )
//	- 코딩 스타일 ( C++ coding convention - reference(google C++ coding convention))
//	- 컴파일러 환경 세팅 ( Release mode /  X64 )
//						- 프로젝트 속성 -> 일반 -> C++ 버전 (최신 초안기능)
//	- SAVE 파일 작성
//		한학기 강의를 자동저장한다
// 
//	공부할 내용
//		- 파일 입출력 ( 텍스트 모드 / 바이너리 모드 )
//		-
// 
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>

using namespace std;

// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.

void save(string_view);

int main() 
{
//	cout << "string Size : " << sizeof(string) << endl;
//	cout << "string_view Size : " << sizeof(string_view) << endl;

	save("SOURCE.cpp");
}

void save(string_view fname) 
{

	//현재 시간을 화면에 출력한다
	auto time = floor<chrono::seconds>(chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = filesystem::file_size(fname);

	//파일을 연다
	ifstream in { fname.data() };

	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",ios::app };
	
	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "파일 정보 : " << fname << ",  크기 - " << size << endl;
	out << "저장 시간 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	out << endl;

	
	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();


	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	copy(v.begin(), v.end(), ostream_iterator<char>{out});
	
}
파일 정보 : main.cpp,  크기 - 518
저장 시간 : 2022-03-07 10:45:22 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "stdafx.h"
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;

	
	save("main.cpp");
}

파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-07 11:00:04 GMT+9


#pragma once


void save(std::string_view);

파일 정보 : save.cpp,  크기 - 1656
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


파일 정보 : main.cpp,  크기 - 530
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-14 10:29:12 GMT+9


#pragma once


void save(std::string_view);

=============================================================================
=============================================================================


파일 정보 : save.cpp,  크기 - 1866
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n=============================================================================" << std::endl;
	out << "=============================================================================\n\n" << std::endl;
	out << "파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1609
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	C++ 복습
// 
// 
// ============================================================================

#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include "playground.h"
#include "save.h"

template <class T>
void change_T(T& a, T& b) {
	T tmp{ a };
	a = b;
	b = tmp;
}


class Dog {
public:
	int local_num;
	std::string name;
	int age;
public:
	Dog(int n) : local_num{ n } {	}
	Dog(std::string str, int age) :name{ str }, age{age} { }
	friend std::ostream& operator<< (std::ostream&, const Dog&);
	
	operator int() {
		return local_num;
	}
};

std::ostream& operator<<(std::ostream& os , const Dog& dog) {
	os << dog.local_num;
	return os;
}


void change(auto& a, auto& b) {
	auto tmp{ b };
	b = a;
	a = tmp;
}


int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	Dog a{ 1 };
	Dog b{ 2 };
	std::string c = "STL";
	std::string d = "C++";
	Dog e{ "코코",3 };
	Dog f{ "댕댕",5 };

	change(a, b);
	change(c, d);
	change(e, f);

	std::cout << " a : " << a << " b : " << b << std::endl;
	std::cout << " c : " << c << " d : " << d << std::endl;
	std::cout << " e : name : " << e.name << " age : " << e.age << std::endl;
	std::cout << " f : name : " << f.name << " age : " << f.age << std::endl;

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2266
저장 시간 : 2022-03-16 12:14:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint() {

}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	saveNum();
	save("source0314.cpp");

}



=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2360
저장 시간 : 2022-03-16 12:16:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint(std::string_view fname) {
	std::ifstream in{ fname.data() };

	
	
}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	//saveNum();
	loadNum("int1000개.txt");
	save("source0314.cpp");

}



=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1538
저장 시간 : 2022-03-21 11:41:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

int main() {
	
	int num{1};
	int sum{};
	//int* n{};
	while (true) {
		/*cout << "만약 종료를 원하시면 0 을 입력해주세요 " << endl;
		cout << "몇개의 인트를 원하십니까? ";
		cin >> num;*/
		
		/*if (!num) {
			break;
		}*/

		//try {
		//	n = new int[num];
		//}
		//catch (exception& e) {
		//	cout << e.what(); // 시스템이 주는 에러는 체크가 가능
		//}

		//n = new int[num];

		/*for (int i = 0; i < num; i++) {
			n[i] = i + 1;
		}

		for (int i = 0; i < num; i++) {
			sum += n[i];
		}*/

		if (INT_MAX <= (sum + num)) {
			break;
		}
		else {
			sum += num;
			num++;
		}

		//delete[] n;
	}
	cout << "int max의 값을 넘지않는 1부터 N까지의 합은 : " << sum << " 입니다" << endl;
	cout << "n의 값은 : " << num << "입니다 " << endl;
	save("main.cpp");

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1126
저장 시간 : 2022-03-21 11:59:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	Dog *dogs = new Dog [3];

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		delete[] dogs;
		return 0;
	}
	delete[] dogs;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1128
저장 시간 : 2022-03-21 12:00:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	Dog *dogs = new Dog [3];

	//비상상황 f()에서 예외발생
	try {
		//f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		delete[] dogs;
		return 0;
	}
	delete[] dogs;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1124
저장 시간 : 2022-03-21 12:04:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog> dogs{ new Dog[3] };

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		return 0;
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1115
저장 시간 : 2022-03-21 12:04:48 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog> dogs{ new Dog[3] };

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1124
저장 시간 : 2022-03-21 12:06:19 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	지난시간 - int[100] 대신 array<int, 100>을 사용하자
// 
// 
// 
// ============================================================================

// 문제
// 사용자가 원하는갯수 만큼 int를 저장할 메모리를 만들어라
// 그 메모리를 1부터 다 더한 값을 출력하라
// -이 과정을 영원히 반복하고 문제가 없도록 고쳐라
// 1부터 num까지 더할때 int의 최댓값을 넘지않는 NUM값은?


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;

struct Dog {
	Dog() { cout << "Dog 생성 " << endl; }
	~Dog() { cout << "Dog 소멸 " << endl; }
};

void f() {
	throw 1;
}

int main() {
	save("main.cpp");

	//raw ptr 임으로 사용 지양할것
	unique_ptr<Dog[]> dogs{new Dog[3]};

	//비상상황 f()에서 예외발생
	try {
		f();
	}
	catch (...) {
		cout << "예외를 잘 잡았다" << endl;
		return 0;
	}
	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 746
저장 시간 : 2022-03-21 12:18:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.21 월34              월23수34                   (1주1일)
// 
//	찾아보기 - RAII / Stack Unwinding
// 
// 
// 
// ============================================================================


#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include "playground.h"
#include "save.h"

using namespace std;


int main() {
	save("main.cpp");
	
	while (true) {
		unique_ptr<int[]> p{ new int[10'000'000] };

		long long sum{};
		for (int i = 0; i < 10'000'000; i++) {
			sum += p[i];
		}
		cout << "합계 : " << sum << endl;
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 856
저장 시간 : 2022-03-23 11:46:54 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;

	while (input >> ch) {
		cout << ch << endl;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 848
저장 시간 : 2022-03-23 11:47:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;

	while (input >> ch) {
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 867
저장 시간 : 2022-03-23 11:47:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;
	input >> noskipws;
	while (input >> ch) {
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 918
저장 시간 : 2022-03-23 11:49:38 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };


	char ch;
	input >> noskipws;

	while (input >> ch) {
		if (islower(ch)) {
			ch = toupper(ch);
		}
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 933
저장 시간 : 2022-03-23 11:52:31 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };

	ofstream output { "소스.txt",ios::out };

	char ch;
	input >> noskipws;

	while (input >> ch) {
		ch = toupper(ch);
		cout << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 950
저장 시간 : 2022-03-23 11:53:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp" };

	ofstream output { "소스.txt" ,ios::out};

	char ch;
	input >> noskipws;

	while (input >> ch) {
		ch = toupper(ch);
		cout << ch;
		output << ch;
	}
	
	

	
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 942
저장 시간 : 2022-03-23 12:02:16 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// 문제 - 소스.cpp를 읽어
// 소문자를 대문자료 변환하여
// 소스.txt에 저장하라

int main() {
	save("main.cpp");

	ifstream input{ "source0307.cpp"};
	ofstream output{ "소스 대문자.cpp" };
	transform(istreambuf_iterator<char>{input}, {}, ostreambuf_iterator<char>{output}, [](char c) {
		return toupper(c);
		});

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1056
저장 시간 : 2022-03-23 12:12:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

random_device rda;
default_random_engine drea{ rda() };
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;

	for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}
	sort(tmp.begin(), tmp.end());

	for (const auto& s : tmp) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1115
저장 시간 : 2022-03-23 12:13:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

random_device rda;
default_random_engine drea{ rda() };
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}


	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (const auto& s : tmp) {
		cout << s << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1143
저장 시간 : 2022-03-23 12:19:32 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format(":20",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1144
저장 시간 : 2022-03-23 12:19:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format(":20d",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1145
저장 시간 : 2022-03-23 12:19:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}",i) << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1138
저장 시간 : 2022-03-23 12:20:00 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida;

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1158
저장 시간 : 2022-03-23 12:22:53 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:20}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1157
저장 시간 : 2022-03-23 12:23:06 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1172
저장 시간 : 2022-03-23 12:25:13 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end(),greater<int>());


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1199
저장 시간 : 2022-03-23 12:43:44 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//정렬 구간
	sort(tmp.begin(), tmp.end(), [](int a, int b) {
		return a > b;
		});


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1256
저장 시간 : 2022-03-23 12:52:05 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int main() {
	save("main.cpp");

	array<int, 100> tmp;
	//랜덤한 수를을 넣는 구간
	/*for (int i = 0; i < 100; i++) {
		tmp[i] = uida(drea);
	}*/

	for (int& i : tmp) {
		i = uida(drea);
	}

	//sort(어디부터, 어디까지, 어떻게);
	// qsort 도 동일
	//정렬 구간
	sort(tmp.begin(), tmp.end(), [](int a, int b) {
		return a > b;
		});


	//출력구간
	for (int &i : tmp) {
		cout << format("{:4}", i);
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 998
저장 시간 : 2022-03-23 12:55:24 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

int f(int a, int b) {
	return a + b;
}

int main() {
	save("main.cpp");

	auto x = f;
	//int res = (*f)(1, 2);
	int res = x(1, 2);
	cout << res << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 970
저장 시간 : 2022-03-23 12:57:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;


// [문제] 값이 [1,100] 랜덤 int 100개를 생성하고
// 오름차순으로 정렬한 후
// 정렬된 int 100개를 화면에 출력하시오 
//

default_random_engine drea;
uniform_int_distribution<> uida{1,100};

void f() { cout << "함수호출" << endl; }

int main() {
	save("main.cpp");
	
	
	auto x = f;

	cout << typeid(x).name() << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 807
저장 시간 : 2022-03-23 12:59:23 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>
#include <random>
#include <memory>
#include <filesystem>
#include <string_view>
#include "save.h"

using namespace std;



void f() { cout << "함수호출" << endl; }

int main() {
	save("main.cpp");
	
	
	auto x = f;

	cout << typeid(x).name() << endl;
	cout << addressof(x) << endl;

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 881
저장 시간 : 2022-03-23 13:07:34 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.23 수34              월23수34                   (1주1일)
// 
//	오늘 - 호출가능 타입 ( callavle type ) - 정렬 (sort)
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;



void jump() { cout << "jump" << endl; }
void slide() { cout << "slide" << endl; }

int main() {
	save("main.cpp");

	void (*x)(void) = jump;
	int i{};
	bool toggle = true;

	while (true) {
		x();
		this_thread::sleep_for(1s);
		if ((i++ % 3) == 0) {
			if (toggle) {
				x = slide;
				toggle = false;
			}
			else {
				x = jump;
				toggle = true;
			}
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 977
저장 시간 : 2022-03-28 10:49:30 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 985
저장 시간 : 2022-03-28 10:49:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		f();
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 989
저장 시간 : 2022-03-28 10:50:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if (cnt % 3 == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 991
저장 시간 : 2022-03-28 10:51:25 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;


	while (true) {
		auto f = jump; // 이 게임은 항상 f만 호출한다
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if ((cnt % 3) == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 961
저장 시간 : 2022-03-28 10:52:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	while (true) {
		
		using namespace std::literals; //전역으로 using std일 경우 지역에서 살려야한다
		this_thread::sleep_for(1s);
		f();
		cnt++;
		//3초마다 설정이 바뀐다고 가정
		if ((cnt % 3) == 0) {
			if (f == jump) {
				f = slide;
			}else{
				f = jump;
			}
		}
		
	}
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 717
저장 시간 : 2022-03-28 10:55:37 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	cout << sizeof(f) << typeid(f).name() << endl;
	
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 723
저장 시간 : 2022-03-28 10:55:50 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	auto f = jump;

	cout << sizeof(f)<<" " << typeid(f).name() << endl;
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 754
저장 시간 : 2022-03-28 11:02:36 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	int cnt = 0;
	//auto f = jump;

	void (*f)(void) = jump;

	cout << sizeof(f)<<"\n" << typeid(f).name() << endl;
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 707
저장 시간 : 2022-03-28 11:06:27 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	};
	 
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 705
저장 시간 : 2022-03-28 11:07:43 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	}();
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 749
저장 시간 : 2022-03-28 11:08:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");

	[]() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	}();

	cout << typeid([]() {}).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 748
저장 시간 : 2022-03-28 11:13:18 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

void jump() {
	cout << "점프" << endl;
}

void slide() {
	cout << "슬라이딩" << endl;
}


int main() {
	save("main.cpp");
	auto n = []() {
		cout << "안녕, 난 람다라고 해, 만나서 반가워" << endl;
	};

	cout << typeid(n).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 585
저장 시간 : 2022-03-28 11:19:39 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경


int main() {
	save("main.cpp");
	class Dog{};
	cout << typeid(Dog).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 586
저장 시간 : 2022-03-28 11:19:47 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

class Dog {};
int main() {
	save("main.cpp");
	
	cout << typeid(Dog).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 588
저장 시간 : 2022-03-28 11:21:02 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경

auto x = []() {};
int main() {
	save("main.cpp");
	
	cout << typeid(x).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 588
저장 시간 : 2022-03-28 11:21:10 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <thread>
#include "save.h"

using namespace std;

//프로그램의 기능을 바꾼다 - 서브루틴, 함수
//프로그램이 실행될 때 기능을 변경하고 싶다.
// EX ) 게임 - 설정 - 버튼의 기능 변경


int main() {
	save("main.cpp");
	auto x = []() {};
	cout << typeid(x).name() << endl;
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 580
저장 시간 : 2022-03-28 11:25:20 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) -> bool {return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:29:58 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,5,2,4 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:32 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 5,4,3,2,1 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:41 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,2,3,4,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:30:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << endl;
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 627
저장 시간 : 2022-03-28 11:31:08 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;



int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), [](int a, int b) {
		cout << "내림차순 " << a << " - " << b << endl;
		return a > b; });

	for (int n : a) {
		cout << n << "\t";
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 683
저장 시간 : 2022-03-28 11:34:49 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;

class Dog {
public :
	bool operator()(int a, int b) {
		cout << "Dog의 맴버함수야 " << a << " - " << b << endl;
		return a > b;
	}
};

int main() {
	save("main.cpp");
	
	array<int, 5> a{ 1,3,4,2,5 };

	sort(a.begin(), a.end(), Dog{});

	for (int n : a) {
		cout << n << "  ";
	}

}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 557
저장 시간 : 2022-03-28 11:51:07 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	
// 
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

void jump() {
	cout << "점프" << endl;
}
void slide() {
	cout << "슬라이드" << endl;
}


int main() {
	save("main.cpp");
	
	function<void()> f = jump;
	f();
	f = slide;
	f();
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 857
저장 시간 : 2022-03-28 12:04:03 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

class STRING {
	void operator()(char* a) {
		
	}
};

int main() {
	//STRING a{"2022. 3. 28. "};
	//STRING b{ "STL" };

	//cout << a << b << endl;
	cout << typeid("2022. 3. 28. ").name() << endl;

	save("main.cpp");
}






=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 856
저장 시간 : 2022-03-28 12:04:28 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.28 월23              월23수34                   
// 
//	자원을 관리하는 클래스 - STRING - 컨테이너, 반복자, 알고리즘
// 
// [ STL 관찰용 ] STRING 클래스를 작성한다
//   - 자원을 관리하는 클래스 (RAII)
//   - 관찰을 위해 스페셜함수의 동작을 화면에 출력할 수 있게 한다.
//   - 표준 String 클래스의 동작과 같이 코딩한다.
// 
// ============================================================================


#include <iostream>
#include <functional>
#include "save.h"

using namespace std;

class STRING {
	void operator()(char const a) {
		
	}
};

int main() {
	STRING a{"2022. 3. 28. "};
	STRING b{ "STL" };

	cout << a << b << endl;
	cout << typeid("2022. 3. 28. ").name() << endl;

	save("main.cpp");
}




