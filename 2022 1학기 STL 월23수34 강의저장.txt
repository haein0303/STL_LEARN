파일 정보 : SOURCE.cpp,  크기 - 2098
저장 시간 : 2022-03-02 13:18:24 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.2 수34              월23수34                   (1주1일)
// 
//	- 강의소개 ( 책 /  CPPReference.com /  )
//	- 코딩 스타일 ( C++ coding convention - reference(google C++ coding convention))
//	- 컴파일러 환경 세팅 ( Release mode /  X64 )
//						- 프로젝트 속성 -> 일반 -> C++ 버전 (최신 초안기능)
//	- SAVE 파일 작성
//		한학기 강의를 자동저장한다
// 
//	공부할 내용
//		- 파일 입출력 ( 텍스트 모드 / 바이너리 모드 )
//		-
// 
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>

using namespace std;

// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.

void save(string_view);

int main() 
{
//	cout << "string Size : " << sizeof(string) << endl;
//	cout << "string_view Size : " << sizeof(string_view) << endl;

	save("SOURCE.cpp");
}

void save(string_view fname) 
{

	//현재 시간을 화면에 출력한다
	auto time = floor<chrono::seconds>(chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = filesystem::file_size(fname);

	//파일을 연다
	ifstream in { fname.data() };

	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",ios::app };
	
	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "파일 정보 : " << fname << ",  크기 - " << size << endl;
	out << "저장 시간 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	out << endl;

	
	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	vector<char> v{ istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();


	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	copy(v.begin(), v.end(), ostream_iterator<char>{out});
	
}
파일 정보 : main.cpp,  크기 - 518
저장 시간 : 2022-03-07 10:45:22 GMT+9

// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "stdafx.h"
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;

	
	save("main.cpp");
}

파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-07 11:00:04 GMT+9


#pragma once


void save(std::string_view);

파일 정보 : save.cpp,  크기 - 1656
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


파일 정보 : main.cpp,  크기 - 530
저장 시간 : 2022-03-07 11:00:04 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	save함수 분리
// 
// 
// 
// ============================================================================

#include <iostream>
#include "save.h"

int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : save.h,  크기 - 46
저장 시간 : 2022-03-14 10:29:12 GMT+9


#pragma once


void save(std::string_view);

=============================================================================
=============================================================================


파일 정보 : save.cpp,  크기 - 1866
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
// save.cpp
// 
// 저장할 파일의 이름 인풋 - 지정된 파일에 덧붙인다.
//    "2022 1학기 STL 월23수34 강의저장.txt"
// 
// 2022. 3. 7.
// ============================================================================

#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>
#include "save.h"


// 코딩할 내용 - "소스.cpp"를 읽어 강의 저장 파일에 덧붙인다.


void save(std::string_view fname)
{

	
	//현재 시간을 화면에 출력한다
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());
	//cout << "\n 저장시점 : " << chrono::zoned_time("Asia/Seoul", time) << endl;
	auto size = std::filesystem::file_size(fname);

	//파일을 연다
	std::ifstream in{ fname.data() };
	
	//저장한 파일도 연다(덧붙이기 모드로 열어야 한다
	std::ofstream out{ "2022 1학기 STL 월23수34 강의저장.txt",std::ios::app };

	//저장할 파일의 크기와 현재 시간을 강의저장 파일에 기록한다.
	out << "\n\n=============================================================================" << std::endl;
	out << "=============================================================================\n\n" << std::endl;
	out << "파일 정보 : " << fname << ",  크기 - " << size << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << "\n" << std::endl;


	//cout << fname << "의 크기 - " << size << endl;


	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };
	//v.reserve(size);
	//v.assign();

	// v로 읽어 온 파일을 out에 출력한다.

	/*for (char c : v)
	{
		cout << c;
	}*/

	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


=============================================================================
=============================================================================


파일 정보 : main.cpp,  크기 - 1609
저장 시간 : 2022-03-14 10:29:12 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.7 월34              월23수34                   (1주1일)
// 
//	C++ 복습
// 
// 
// ============================================================================

#include <iostream>
#include <ostream>
#include <string>
#include <algorithm>
#include "playground.h"
#include "save.h"

template <class T>
void change_T(T& a, T& b) {
	T tmp{ a };
	a = b;
	b = tmp;
}


class Dog {
public:
	int local_num;
	std::string name;
	int age;
public:
	Dog(int n) : local_num{ n } {	}
	Dog(std::string str, int age) :name{ str }, age{age} { }
	friend std::ostream& operator<< (std::ostream&, const Dog&);
	
	operator int() {
		return local_num;
	}
};

std::ostream& operator<<(std::ostream& os , const Dog& dog) {
	os << dog.local_num;
	return os;
}


void change(auto& a, auto& b) {
	auto tmp{ b };
	b = a;
	a = tmp;
}


int main()
{
	//	cout << "string Size : " << sizeof(string) << endl;
	//	cout << "string_view Size : " << sizeof(string_view) << endl;
	Dog a{ 1 };
	Dog b{ 2 };
	std::string c = "STL";
	std::string d = "C++";
	Dog e{ "코코",3 };
	Dog f{ "댕댕",5 };

	change(a, b);
	change(c, d);
	change(e, f);

	std::cout << " a : " << a << " b : " << b << std::endl;
	std::cout << " c : " << c << " d : " << d << std::endl;
	std::cout << " e : name : " << e.name << " age : " << e.age << std::endl;
	std::cout << " f : name : " << f.name << " age : " << f.age << std::endl;

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}

=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2266
저장 시간 : 2022-03-16 12:14:57 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint() {

}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	saveNum();
	save("source0314.cpp");

}



=============================================================================
=============================================================================


파일 정보 : source0314.cpp,  크기 - 2360
저장 시간 : 2022-03-16 12:16:46 GMT+9


// ============================================================================
//									STL
// 
//	2022.3.14 월34              월23수34                   (1주1일)
// 
//	많은 수의 자료를 다루는 연습
// 1. int -> class
//	  int 여러개를 파일에 저장하기
// 
// C++ 정수형 - 2바이트 이상 / 기계마다 다름
// 
// [숙제]
// 파일입출력 알아보기
// 랜덤하게 뽑아낸 1000개의 수를 파일(int 1000개.txt)에 저장하라.
// 
// 
//  2022.3.16 수34
// 
// 파일에 저장된 파일 출력
// ============================================================================


#include <iostream>
#include <filesystem>
#include <fstream>
#include <vector>
#include <format>
#include <random>
#include <string>
#include <string_view>
#include "save.h"


std::random_device rd;
std::default_random_engine dre{rd()}; //엔진
//엔진은 용량이 크기때문에 전역으로 1회만 설정
std::uniform_int_distribution<> uid; //분포


//[문제] int의 최댓값을 화면에 출력하라
//[문제] 엔진과 분포를 이용하여 임의의(pseudo-random) int 값 1000개를 화면에 출력하라.

//[문제] int 1000개를 저장하려면 메모리 몇 바이트가 필요합니까?
// 이 답에 맞게 int를 파일에 저장하고 메모리 크기를 확인하세요?

void saveNum() {
	std::ofstream out{ "int1000개.txt", std::ios::out };

	for (int i = 0; i < 1000; i++) {
		out << uid(dre) << '\t';
	}

	std::cout << "파일이 정상적으로 저장되었습니다" << std::endl;

	out.close();

}

void loadNum(std::string_view fname) {
	std::ifstream in{ fname.data()};
	int max=0;
	int num;
	for (int i = 0; i < 1000; i++) {
		in >> num;
		if (max < num) {
			max = num;
		}
		std::cout << num;
	}
	std::cout << "가장 큰수 : " << max << std::endl;
	
	std::cout << "가장 큰수 : " << *std::max_element(std::istream_iterator<int> {in}, {});

}

void sizeint(std::string_view fname) {
	std::ifstream in{ fname.data() };

	
	
}

int main() {
	

	//srand(time(NULL)); //시간값을 이용해서 랜덤의 시작값을 바꿈
//	for (int i = 0; i < 1000; i++) {
	//	std::cout<<std::format("{:<15}", uid(dre)); // < 왼쪽정렬 / >오른쪽정렬 (기본) / ^ 가운대정렬
	//}

	//std::cout << "\n\n\n" << INT_MAX  << "\n" << 0B01111111'11111111'11111111'11111111 <<"\n" << 0x7FFFFFFF << endl;
	//std::cout << std::numeric_limits<int>::max() << std::endl;
	


	//saveNum();
	loadNum("int1000개.txt");
	save("source0314.cpp");

}

